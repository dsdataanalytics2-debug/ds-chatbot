#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ЁЯдЦ ржЙржирзНржиржд AI ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ
ChatGPT/Cursor AI рж╕рзНржЯрж╛ржЗрж▓рзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржмржВ рж╕рзБржирзНржжрж░ ржЙрждрзНрждрж░ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import json
import re
from typing import List, Dict, Any
import random

# Page configuration
st.set_page_config(
    page_title="ЁЯдЦ ржЙржирзНржиржд AI ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ",
    page_icon="ЁЯдЦ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better UI
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #1f77b4, #ff7f0e);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 10px;
        margin: 1rem 0;
        border-left: 4px solid;
    }
    .user-message {
        background-color: #e3f2fd;
        border-left-color: #2196f3;
    }
    .bot-message {
        background-color: #f3e5f5;
        border-left-color: #9c27b0;
    }
    .info-box {
        background-color: #e8f5e8;
        border: 1px solid #4caf50;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .warning-box {
        background-color: #fff3e0;
        border: 1px solid #ff9800;
        border-radius: 8px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .code-block {
        background-color: #f5f5f5;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 1rem;
        font-family: 'Courier New', monospace;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

class AdvancedMedicineChatbot:
    def __init__(self):
        self.medicine_data = None
        self.conversation_history = []
        self.load_data()
        
    def load_data(self):
        """Load medicine data from Excel file"""
        try:
            self.medicine_data = pd.read_excel('medicine_data.xlsx')
            st.success("тЬЕ ржорзЗржбрж┐рж╕рж┐ржи ржбрзЗржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!")
        except Exception as e:
            st.error(f"тЭМ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
            self.medicine_data = pd.DataFrame()
    
    def preprocess_text(self, text: str) -> str:
        """Preprocess text for better matching"""
        text = text.lower().strip()
        # Remove special characters but keep Bengali text
        text = re.sub(r'[^\w\s\u0980-\u09FF]', ' ', text)
        return text
    
    def find_medicine_info(self, query: str) -> Dict[str, Any]:
        """Find medicine information based on query"""
        if self.medicine_data.empty:
            return {"found": False, "message": "ржбрзЗржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐"}
        
        query_processed = self.preprocess_text(query)
        
        # Search in medicine names
        matches = []
        for idx, row in self.medicine_data.iterrows():
            medicine_name = str(row.get('medicine_name', '')).lower()
            generic_name = str(row.get('generic_name', '')).lower()
            indication = str(row.get('indication', '')).lower()
            
            if (query_processed in medicine_name or 
                query_processed in generic_name or 
                query_processed in indication):
                matches.append(row.to_dict())
        
        if matches:
            return {"found": True, "data": matches}
        else:
            return {"found": False, "message": "ржХрзЛржи ржорзЗржбрж┐рж╕рж┐ржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐"}
    
    def generate_detailed_response(self, query: str, medicine_info: Dict[str, Any]) -> str:
        """Generate detailed, well-structured response like ChatGPT"""
        
        if not medicine_info["found"]:
            return self.generate_not_found_response(query)
        
        medicines = medicine_info["data"]
        response_parts = []
        
        # Header
        response_parts.append("## ЁЯФН **ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржЙрждрзНрждрж░**")
        response_parts.append(f"**ржкрзНрж░рж╢рзНржи:** {query}")
        response_parts.append("")
        
        # Summary
        if len(medicines) == 1:
            response_parts.append("### ЁЯУЛ **ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рждржерзНржп**")
        else:
            response_parts.append(f"### ЁЯУЛ **ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ {len(medicines)}ржЯрж┐ ржорзЗржбрж┐рж╕рж┐ржи**")
        
        response_parts.append("")
        
        # Detailed information for each medicine
        for i, medicine in enumerate(medicines, 1):
            response_parts.append(f"#### ЁЯТК **{i}. {medicine.get('medicine_name', 'ржирж╛ржо ржЬрж╛ржирж╛ ржирзЗржЗ')}**")
            response_parts.append("")
            
            # Basic information
            if medicine.get('generic_name'):
                response_parts.append(f"**ржЬрзЗржирзЗрж░рж┐ржХ ржирж╛ржо:** {medicine['generic_name']}")
            if medicine.get('strength'):
                response_parts.append(f"**рж╢ржХрзНрждрж┐:** {medicine['strength']}")
            if medicine.get('dosage_form'):
                response_parts.append(f"**ржбрзЛржЬ ржлрж░рзНржо:** {medicine['dosage_form']}")
            
            response_parts.append("")
            
            # Indication
            if medicine.get('indication'):
                response_parts.append("**ЁЯУЭ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржХрж╛рж░ржг:**")
                response_parts.append(f"> {medicine['indication']}")
                response_parts.append("")
            
            # Dosage
            if medicine.get('dosage'):
                response_parts.append("**ЁЯТК ржбрзЛржЬ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**")
                response_parts.append(f"> {medicine['dosage']}")
                response_parts.append("")
            
            # Side effects
            if medicine.get('side_effects'):
                response_parts.append("**тЪая╕П ржкрж╛рж░рзНрж╢рзНржм ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛:**")
                response_parts.append(f"> {medicine['side_effects']}")
                response_parts.append("")
            
            # Precautions
            if medicine.get('precautions'):
                response_parts.append("**ЁЯЪи рж╕рждрж░рзНржХрждрж╛:**")
                response_parts.append(f"> {medicine['precautions']}")
                response_parts.append("")
            
            # Contraindications
            if medicine.get('contraindications'):
                response_parts.append("**тЭМ ржирж┐рж╖рж┐ржжрзНржз:**")
                response_parts.append(f"> {medicine['contraindications']}")
                response_parts.append("")
            
            response_parts.append("---")
            response_parts.append("")
        
        # Additional information
        response_parts.append("### ЁЯТб **ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржкрж░рж╛ржорж░рзНрж╢**")
        response_parts.append("")
        response_parts.append("ЁЯФ╕ **ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржи:** ржПржЗ рждржерзНржпржЧрзБрж▓рзЛ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржЙржжрзНржжрзЗрж╢рзНржпрзЗред")
        response_parts.append("")
        response_parts.append("ЁЯФ╕ **ржбрзЛржЬ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи:** ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржд ржбрзЛржЬ ржЕржирзБрж╕рж░ржг ржХрж░рзБржиред")
        response_parts.append("")
        response_parts.append("ЁЯФ╕ **ржкрж╛рж░рзНрж╢рзНржм ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ рж▓ржХрзНрж╖рзНржп ржХрж░рзБржи:** ржХрзЛржи ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж▓ржХрзНрж╖ржг ржжрзЗржЦрж╛ ржжрж┐рж▓рзЗ ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред")
        response_parts.append("")
        response_parts.append("ЁЯФ╕ **ржирж┐ржпрж╝ржорж┐ржд ржЪрзЗржХржЖржк:** ржирж┐ржпрж╝ржорж┐ржд ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржХрж╛ржЫрзЗ ржпрж╛ржиред")
        
        return "\n".join(response_parts)
    
    def generate_not_found_response(self, query: str) -> str:
        """Generate helpful response when medicine not found"""
        response = f"""
## ЁЯФН **ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░**

**ржкрзНрж░рж╢рзНржи:** {query}

### тЭМ **ржорзЗржбрж┐рж╕рж┐ржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐**

ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржЕржирзБрж╕ржирзНржзрж╛ржиржХрзГржд ржорзЗржбрж┐рж╕рж┐ржи ржЖржорж╛ржжрзЗрж░ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред

### ЁЯТб **рж╕рж╛рж╣рж╛ржпрзНржпржХрж╛рж░рзА ржкрж░рж╛ржорж░рзНрж╢**

ЁЯФ╕ **рж╕ржарж┐ржХ ржмрж╛ржирж╛ржи:** ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ ржирж╛ржо рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзЗржЫрзЗржи ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
ЁЯФ╕ **ржЬрзЗржирзЗрж░рж┐ржХ ржирж╛ржо:** ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ ржЬрзЗржирзЗрж░рж┐ржХ ржирж╛ржо ржжрж┐ржпрж╝рзЗ ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи
ЁЯФ╕ **ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢:** ржЖржкржирж╛рж░ ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи
ЁЯФ╕ **ржлрж╛рж░рзНржорзЗрж╕рж┐:** ржирж┐ржХржЯрж╕рзНрже ржлрж╛рж░рзНржорзЗрж╕рж┐рждрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи

### ЁЯУЮ **ржЬрж░рзБрж░рж┐ ржпрзЛржЧрж╛ржпрзЛржЧ**

ЁЯЖШ **ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛:** рзпрзпрзп
ЁЯПе **ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓:** ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи

### ЁЯФД **ржЖрж░ржУ ржЕржирзБрж╕ржирзНржзрж╛ржи**

ржЖржкржирж┐ ржЕржирзНржп ржорзЗржбрж┐рж╕рж┐ржи рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржЕржержмрж╛ рж╕рж╛ржзрж╛рж░ржг рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢ ржЪрж╛ржЗрждрзЗ ржкрж╛рж░рзЗржиред
        """
        return response
    
    def generate_health_advice(self, query: str) -> str:
        """Generate general health advice"""
        advice_templates = [
            "## ЁЯПе **рж╕рж╛ржзрж╛рж░ржг рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢**\n\nржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░рзЗ ржХрж┐ржЫрзБ рж╕рж╛ржзрж╛рж░ржг ржкрж░рж╛ржорж░рзНрж╢:\n\nЁЯФ╕ **ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо ржХрж░рзБржи**\nЁЯФ╕ **рж╕рзБрж╖ржо ржЦрж╛ржмрж╛рж░ ржЦрж╛ржи**\nЁЯФ╕ **ржкрж░рзНржпрж╛ржкрзНржд ржШрзБржорж╛ржи**\nЁЯФ╕ **ржирж┐ржпрж╝ржорж┐ржд ржЪрзЗржХржЖржк ржХрж░рзБржи**",
            
            "## ЁЯТк **рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЬрзАржмржиржпрж╛ржкржи**\n\nрж╕рзБрж╕рзНрже ржерж╛ржХрж╛рж░ ржЬржирзНржп:\n\nЁЯеЧ **ржкрзБрж╖рзНржЯрж┐ржХрж░ ржЦрж╛ржмрж╛рж░**\nЁЯПГтАНтЩВя╕П **ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо**\nЁЯШ┤ **ржкрж░рзНржпрж╛ржкрзНржд ржмрж┐рж╢рзНрж░рж╛ржо**\nЁЯЪн **ржзрзВржоржкрж╛ржи рждрзНржпрж╛ржЧ ржХрж░рзБржи**",
            
            "## ЁЯзШтАНтЩАя╕П **ржорж╛ржирж╕рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп**\n\nржорж╛ржирж╕рж┐ржХ рж╕рзБрж╕рзНржерждрж╛рж░ ржЬржирзНржп:\n\nЁЯШК **ржЗрждрж┐ржмрж╛ржЪржХ ржЪрж┐ржирзНрждрж╛ ржХрж░рзБржи**\nЁЯзШтАНтЩАя╕П **ржорзЗржбрж┐ржЯрзЗрж╢ржи ржХрж░рзБржи**\nЁЯСе **рж╕рж╛ржорж╛ржЬрж┐ржХ ржпрзЛржЧрж╛ржпрзЛржЧ ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи**\nЁЯУЪ **ржирждрзБржи ржХрж┐ржЫрзБ рж╢рж┐ржЦрзБржи**"
        ]
        
        return random.choice(advice_templates)
    
    def process_query(self, query: str) -> str:
        """Process user query and generate response"""
        # Add to conversation history
        self.conversation_history.append({"user": query, "timestamp": datetime.now()})
        
        # Check if it's a general health question
        health_keywords = ['рж╕рзНржмрж╛рж╕рзНржерзНржп', 'ржкрж░рж╛ржорж░рзНрж╢', 'ржЙржкржжрзЗрж╢', 'ржЬрзАржмржиржпрж╛ржкржи', 'ржмрзНржпрж╛ржпрж╝рж╛ржо', 'ржЦрж╛ржмрж╛рж░', 'ржШрзБржо']
        query_lower = query.lower()
        
        if any(keyword in query_lower for keyword in health_keywords):
            return self.generate_health_advice(query)
        
        # Search for medicine
        medicine_info = self.find_medicine_info(query)
        return self.generate_detailed_response(query, medicine_info)

def main():
    """Main application"""
    
    # Header
    st.markdown('<h1 class="main-header">ЁЯдЦ ржЙржирзНржиржд AI ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ</h1>', unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("ЁЯОЫя╕П **ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржкрзНржпрж╛ржирзЗрж▓**")
        
        # About section
        st.subheader("тД╣я╕П **рж╕ржорзНржкрж░рзНржХрзЗ**")
        st.info("""
        ржПржЗ ржЪрзНржпрж╛ржЯржмржЯ ChatGPT/Cursor AI рж╕рзНржЯрж╛ржЗрж▓рзЗ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржмржВ рж╕рзБржирзНржжрж░ ржЙрждрзНрждрж░ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗред
        
        **ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрж╕ржорзВрж╣:**
        - ЁЯФН рж╕рзНржорж╛рж░рзНржЯ ржЕржирзБрж╕ржирзНржзрж╛ржи
        - ЁЯУЛ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп
        - ЁЯТб рж╕рж╣рж╛ржпрж╝ржХ ржкрж░рж╛ржорж░рзНрж╢
        - ЁЯОи рж╕рзБржирзНржжрж░ UI
        """)
        
        # Statistics
        st.subheader("ЁЯУК **ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи**")
        if 'chatbot' in st.session_state:
            st.metric("ржорзЛржЯ ржкрзНрж░рж╢рзНржи", len(st.session_state.chatbot.conversation_history))
        
        # Clear chat button
        if st.button("ЁЯЧСя╕П ржЪрзНржпрж╛ржЯ ржорзБржЫрзБржи"):
            if 'chatbot' in st.session_state:
                st.session_state.chatbot.conversation_history = []
            st.rerun()
    
    # Initialize chatbot
    if 'chatbot' not in st.session_state:
        st.session_state.chatbot = AdvancedMedicineChatbot()
    
    # Main chat interface
    st.subheader("ЁЯТм **ржЪрзНржпрж╛ржЯ ржХрж░рзБржи**")
    
    # Chat input
    user_input = st.text_input(
        "ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи:",
        placeholder="ржпрзЗржоржи: Paracetamol, Aspirin, ржмрж╛ рж╕рж╛ржзрж╛рж░ржг рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢..."
    )
    
    # Send button
    col1, col2, col3 = st.columns([1, 1, 1])
    with col2:
        send_button = st.button("ЁЯЪА ржкрж╛ржарж╛ржи", use_container_width=True)
    
    # Process query
    if send_button and user_input:
        with st.spinner("ЁЯдЦ ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."):
            response = st.session_state.chatbot.process_query(user_input)
            
            # Display response
            st.markdown("---")
            st.markdown(response, unsafe_allow_html=True)
            
            # Add to chat history
            st.session_state.chatbot.conversation_history.append({
                "bot": response, 
                "timestamp": datetime.now()
            })
    
    # Example queries
    st.subheader("ЁЯТб **ржЙржжрж╛рж╣рж░ржг ржкрзНрж░рж╢рзНржи**")
    example_queries = [
        "Paracetamol рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирждрзЗ ржЪрж╛ржЗ",
        "Aspirin ржПрж░ ржкрж╛рж░рзНрж╢рзНржм ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржХрзА?",
        "рж╕рзБрж╕рзНрже ржерж╛ржХрж╛рж░ ржЬржирзНржп ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржи",
        "ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржорзЗрж░ ржЙржкржХрж╛рж░рж┐рждрж╛"
    ]
    
    cols = st.columns(2)
    for i, query in enumerate(example_queries):
        with cols[i % 2]:
            if st.button(query, key=f"example_{i}"):
                with st.spinner("ЁЯдЦ ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."):
                    response = st.session_state.chatbot.process_query(query)
                    st.markdown("---")
                    st.markdown(response, unsafe_allow_html=True)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        ЁЯдЦ ржЙржирзНржиржд AI ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ | ChatGPT/Cursor AI рж╕рзНржЯрж╛ржЗрж▓ ржЙрждрзНрждрж░
        <br>
        тЪая╕П ржПржЗ рждржерзНржпржЧрзБрж▓рзЛ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржЙржжрзНржжрзЗрж╢рзНржпрзЗред ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
