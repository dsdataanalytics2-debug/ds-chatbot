#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ЁЯЪА рж╕рзБржкрж╛рж░ ржЙржирзНржиржд AI ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ
ChatGPT/Cursor AI рж╕рзНржЯрж╛ржЗрж▓рзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ ржорж╛ржирзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржмржВ рж╕рзБржирзНржжрж░ ржЙрждрзНрждрж░ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime
import json
import re
from typing import List, Dict, Any
import random

# Page configuration
st.set_page_config(
    page_title="ЁЯЪА рж╕рзБржкрж╛рж░ ржЙржирзНржиржд AI ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ",
    page_icon="ЁЯЪА",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Enhanced CSS
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .chat-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 15px;
        padding: 2rem;
        margin: 1rem 0;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }
    .info-card {
        background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
        border-radius: 10px;
        padding: 1rem;
        margin: 1rem 0;
        border-left: 5px solid #667eea;
    }
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 25px;
        padding: 0.5rem 2rem;
        font-weight: bold;
    }
</style>
""", unsafe_allow_html=True)

class SuperAdvancedMedicineChatbot:
    def __init__(self):
        self.medicine_data = None
        self.conversation_history = []
        self.search_analytics = {}
        self.load_data()
        
    def load_data(self):
        """Load medicine data with enhanced error handling"""
        try:
            self.medicine_data = pd.read_excel('medicine_data.xlsx')
            self.medicine_data = self.medicine_data.fillna('')
            st.success("тЬЕ ржорзЗржбрж┐рж╕рж┐ржи ржбрзЗржЯрж╛ рж╕ржлрж▓ржнрж╛ржмрзЗ рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ!")
            st.info(f"ЁЯУК **ржбрзЗржЯрж╛ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:** {len(self.medicine_data)}ржЯрж┐ ржорзЗржбрж┐рж╕рж┐ржи рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ")
        except Exception as e:
            st.error(f"тЭМ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
            self.medicine_data = pd.DataFrame()
    
    def preprocess_text(self, text: str) -> str:
        """Enhanced text preprocessing"""
        text = text.lower().strip()
        text = re.sub(r'[^\w\s\u0980-\u09FF]', ' ', text)
        text = re.sub(r'\s+', ' ', text)
        return text
    
    def find_medicine_info(self, query: str) -> Dict[str, Any]:
        """Enhanced medicine search with multiple strategies"""
        if self.medicine_data.empty:
            return {"found": False, "message": "ржбрзЗржЯрж╛ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐"}
        
        query_processed = self.preprocess_text(query)
        self.search_analytics[query_processed] = self.search_analytics.get(query_processed, 0) + 1
        
        matches = []
        
        # Multiple search strategies
        for idx, row in self.medicine_data.iterrows():
            medicine_name = str(row.get('medicine_name', '')).lower()
            generic_name = str(row.get('generic_name', '')).lower()
            indication = str(row.get('indication', '')).lower()
            
            if (query_processed in medicine_name or 
                query_processed in generic_name or 
                query_processed in indication):
                matches.append(row.to_dict())
        
        # Remove duplicates
        unique_matches = []
        seen = set()
        for match in matches:
            medicine_id = match.get('medicine_name', '')
            if medicine_id not in seen:
                seen.add(medicine_id)
                unique_matches.append(match)
        
        if unique_matches:
            return {"found": True, "data": unique_matches[:5]}
        else:
            return {"found": False, "message": "ржХрзЛржи ржорзЗржбрж┐рж╕рж┐ржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐"}
    
    def generate_super_detailed_response(self, query: str, medicine_info: Dict[str, Any]) -> str:
        """Generate super detailed, ChatGPT-style response"""
        
        if not medicine_info["found"]:
            return self.generate_enhanced_not_found_response(query)
        
        medicines = medicine_info["data"]
        response_parts = []
        
        # Enhanced header
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        response_parts.append("## ЁЯЪА **ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ рж╕рж░рзНржмрзЛржЪрзНржЪ ржорж╛ржирзЗрж░ ржЙрждрзНрждрж░**")
        response_parts.append(f"**тП░ рж╕ржоржпрж╝:** {current_time}")
        response_parts.append(f"**ЁЯФН ржкрзНрж░рж╢рзНржи:** {query}")
        response_parts.append("")
        
        # Summary
        if len(medicines) == 1:
            response_parts.append("### ЁЯУЛ **ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп**")
        else:
            response_parts.append(f"### ЁЯУЛ **ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ {len(medicines)}ржЯрж┐ ржорзЗржбрж┐рж╕рж┐ржи**")
        response_parts.append("")
        
        # Detailed information for each medicine
        for i, medicine in enumerate(medicines, 1):
            response_parts.append(f"#### ЁЯТК **{i}. {medicine.get('medicine_name', 'ржирж╛ржо ржЬрж╛ржирж╛ ржирзЗржЗ')}**")
            response_parts.append("")
            
            # Basic information
            basic_info = []
            if medicine.get('generic_name'):
                basic_info.append(f"**ржЬрзЗржирзЗрж░рж┐ржХ ржирж╛ржо:** {medicine['generic_name']}")
            if medicine.get('strength'):
                basic_info.append(f"**рж╢ржХрзНрждрж┐:** {medicine['strength']}")
            if medicine.get('dosage_form'):
                basic_info.append(f"**ржбрзЛржЬ ржлрж░рзНржо:** {medicine['dosage_form']}")
            
            if basic_info:
                response_parts.append("**ЁЯУК ржорзМрж▓рж┐ржХ рждржерзНржп:**")
                response_parts.extend(basic_info)
                response_parts.append("")
            
            # Detailed sections
            sections = [
                ('indication', 'ЁЯУЭ **ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржХрж╛рж░ржг:**'),
                ('dosage', 'ЁЯТК **ржбрзЛржЬ ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**'),
                ('side_effects', 'тЪая╕П **ржкрж╛рж░рзНрж╢рзНржм ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛:**'),
                ('precautions', 'ЁЯЪи **рж╕рждрж░рзНржХрждрж╛:**'),
                ('contraindications', 'тЭМ **ржирж┐рж╖рж┐ржжрзНржз:**')
            ]
            
            for field, title in sections:
                if medicine.get(field):
                    response_parts.append(title)
                    response_parts.append(f"> {medicine[field]}")
                    response_parts.append("")
            
            response_parts.append("---")
            response_parts.append("")
        
        # Enhanced additional information
        response_parts.append("### ЁЯТб **ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржкрж░рж╛ржорж░рзНрж╢ ржПржмржВ рж╕рждрж░рзНржХрждрж╛**")
        response_parts.append("")
        
        advice_points = [
            "ЁЯФ╕ **ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржи:** ржПржЗ рждржерзНржпржЧрзБрж▓рзЛ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржЙржжрзНржжрзЗрж╢рзНржпрзЗред",
            "ЁЯФ╕ **ржбрзЛржЬ ржЕржирзБрж╕рж░ржг ржХрж░рзБржи:** ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржирж┐рж░рзНржжрзЗрж╢рж┐ржд ржбрзЛржЬ ржЕржирзБрж╕рж░ржг ржХрж░рзБржиред",
            "ЁЯФ╕ **ржкрж╛рж░рзНрж╢рзНржм ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ рж▓ржХрзНрж╖рзНржп ржХрж░рзБржи:** ржХрзЛржи ржЕрж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ рж▓ржХрзНрж╖ржг ржжрзЗржЦрж╛ ржжрж┐рж▓рзЗ ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред",
            "ЁЯФ╕ **ржирж┐ржпрж╝ржорж┐ржд ржЪрзЗржХржЖржк:** ржирж┐ржпрж╝ржорж┐ржд ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржХрж╛ржЫрзЗ ржпрж╛ржиред",
            "ЁЯФ╕ **ржЕржирзНржпрж╛ржирзНржп ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ рж╕рж╛ржерзЗ ржорж┐ржерж╕рзНржХрзНрж░рж┐ржпрж╝рж╛:** ржЕржирзНржп ржорзЗржбрж┐рж╕рж┐ржи ржЦрж╛ржУржпрж╝рж╛рж░ ржЖржЧрзЗ ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред"
        ]
        
        for point in advice_points:
            response_parts.append(point)
            response_parts.append("")
        
        # Emergency contact
        response_parts.append("### ЁЯЖШ **ржЬрж░рзБрж░рж┐ ржпрзЛржЧрж╛ржпрзЛржЧ**")
        response_parts.append("")
        response_parts.append("**ЁЯУЮ ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛:** рзпрзпрзп")
        response_parts.append("**ЁЯПе ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓:** ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи")
        
        return "\n".join(response_parts)
    
    def generate_enhanced_not_found_response(self, query: str) -> str:
        """Generate enhanced response when medicine not found"""
        response = f"""
## ЁЯФН **ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ ржЙрждрзНрждрж░**

**тП░ рж╕ржоржпрж╝:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**ЁЯФН ржкрзНрж░рж╢рзНржи:** {query}

### тЭМ **ржорзЗржбрж┐рж╕рж┐ржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐**

ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржЕржирзБрж╕ржирзНржзрж╛ржиржХрзГржд ржорзЗржбрж┐рж╕рж┐ржи ржЖржорж╛ржжрзЗрж░ ржбрзЗржЯрж╛ржмрзЗрж╕рзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред

### ЁЯТб **рж╕рж╛рж╣рж╛ржпрзНржпржХрж╛рж░рзА ржкрж░рж╛ржорж░рзНрж╢**

ЁЯФ╕ **рж╕ржарж┐ржХ ржмрж╛ржирж╛ржи:** ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ ржирж╛ржо рж╕ржарж┐ржХржнрж╛ржмрзЗ рж▓рж┐ржЦрзЗржЫрзЗржи ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзБржи
ЁЯФ╕ **ржЬрзЗржирзЗрж░рж┐ржХ ржирж╛ржо:** ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ ржЬрзЗржирзЗрж░рж┐ржХ ржирж╛ржо ржжрж┐ржпрж╝рзЗ ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи
ЁЯФ╕ **ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржХрж╛рж░ржг:** рж▓ржХрзНрж╖ржг ржмрж╛ рж░рзЛржЧрзЗрж░ ржирж╛ржо ржжрж┐ржпрж╝рзЗ ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи
ЁЯФ╕ **ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢:** ржЖржкржирж╛рж░ ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи

### ЁЯФН **ржЕржирзБрж╕ржирзНржзрж╛ржирзЗрж░ ржЯрж┐ржкрж╕**

**рж╕ржарж┐ржХ ржирж╛ржо рж▓рж┐ржЦрзБржи:**
- Paracetamol (ржкрзНржпрж╛рж░рж╛рж╕рж┐ржЯрж╛ржорж▓)
- Aspirin (ржЕрзНржпрж╛рж╕ржкрж┐рж░рж┐ржи)
- Ibuprofen (ржЖржЗржмрзБржкрзНрж░рзЛржлрзЗржи)

**рж▓ржХрзНрж╖ржг ржЕржирзБрж╕ржирзНржзрж╛ржи:**
- ржЬрзНржмрж░
- ржмрзНржпржерж╛
- ржорж╛ржерж╛ржмрзНржпржерж╛
- ржХрж╛рж╢рж┐

### ЁЯУЮ **ржЬрж░рзБрж░рж┐ ржпрзЛржЧрж╛ржпрзЛржЧ**

ЁЯЖШ **ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛:** рзпрзпрзп
ЁЯПе **ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓:** ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛рж░ рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи
        """
        return response
    
    def generate_enhanced_health_advice(self, query: str) -> str:
        """Generate enhanced health advice"""
        advice_templates = [
            f"""
## ЁЯПе **рж╕рж╛ржзрж╛рж░ржг рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢**

**тП░ рж╕ржоржпрж╝:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**ЁЯФН ржкрзНрж░рж╢рзНржи:** {query}

### ЁЯТк **рж╕рзБрж╕рзНрже ржерж╛ржХрж╛рж░ ржорзВрж▓ ржирзАрждрж┐**

#### ЁЯеЧ **ржкрзБрж╖рзНржЯрж┐ржХрж░ ржЦрж╛ржмрж╛рж░**
- **рж╕ржмрзБржЬ рж╢рж╛ржХрж╕ржмржЬрж┐:** ржкрзНрж░рждрж┐ржжрж┐ржи ржЕржирзНрждржд рзй-рзк ржкрж░рж┐ржмрзЗрж╢ржи
- **ржлрж▓ржорзВрж▓:** ржнрж┐ржЯрж╛ржорж┐ржи рж╕рж┐ рж╕ржорзГржжрзНржз ржлрж▓ ржмрзЗрж╢рж┐ ржЦрж╛ржи
- **ржкрзНрж░рзЛржЯрж┐ржи:** ржорж╛ржЫ, ржорж╛ржВрж╕, ржбрж┐ржо, ржжрзБржз ржирж┐ржпрж╝ржорж┐ржд ржЦрж╛ржи
- **ржЬрж▓:** ржжрж┐ржирзЗ рзо-рззрзж ржЧрзНрж▓рж╛рж╕ ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рзБржи

#### ЁЯПГтАНтЩВя╕П **ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо**
- **ржХрж╛рж░рзНржбрж┐ржУ:** рж╕ржкрзНрждрж╛рж╣рзЗ рзй-рзк ржжрж┐ржи рзйрзж ржорж┐ржирж┐ржЯ
- **рж╢ржХрзНрждрж┐ ржкрзНрж░рж╢рж┐ржХрзНрж╖ржг:** рж╕ржкрзНрждрж╛рж╣рзЗ рзи-рзй ржжрж┐ржи
- **ржпрзЛржЧржмрзНржпрж╛ржпрж╝рж╛ржо:** ржорж╛ржирж╕рж┐ржХ рж╢рж╛ржирзНрждрж┐рж░ ржЬржирзНржп
- **рж╣рж╛ржБржЯрж╛:** ржкрзНрж░рждрж┐ржжрж┐ржи рззрзж,рзжрзжрзж ржкржжржХрзНрж╖рзЗржк

#### ЁЯШ┤ **ржкрж░рзНржпрж╛ржкрзНржд ржмрж┐рж╢рзНрж░рж╛ржо**
- **ржШрзБржо:** рж░рж╛рждрзЗ рзн-рзп ржШржирзНржЯрж╛ ржШрзБржорж╛ржи
- **ржирж┐ржпрж╝ржорж┐ржд рж╕ржоржпрж╝:** ржкрзНрж░рждрж┐ржжрж┐ржи ржПржХржЗ рж╕ржоржпрж╝рзЗ ржШрзБржорж╛ржи
- **рж╢рж╛ржирзНржд ржкрж░рж┐ржмрзЗрж╢:** ржШрзБржорзЗрж░ ржЬржирзНржп ржЙржкржпрзБржХрзНржд ржкрж░рж┐ржмрзЗрж╢ рждрзИрж░рж┐ ржХрж░рзБржи

### ЁЯЪи **рж╕рждрж░рзНржХрждрж╛**
- ржзрзВржоржкрж╛ржи ржПржмржВ ржоржжрзНржпржкрж╛ржи рждрзНржпрж╛ржЧ ржХрж░рзБржи
- ржирж┐ржпрж╝ржорж┐ржд ржЪрзЗржХржЖржк ржХрж░рзБржи
- ржЪрж╛ржк ржХржо рж░рж╛ржЦрзБржи
            """,
            
            f"""
## ЁЯТк **рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржЬрзАржмржиржпрж╛ржкржи ржЧрж╛ржЗржб**

**тП░ рж╕ржоржпрж╝:** {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
**ЁЯФН ржкрзНрж░рж╢рзНржи:** {query}

### ЁЯОп **рж▓ржХрзНрж╖рзНржп ржирж┐рж░рзНржзрж╛рж░ржг**

#### ЁЯУК **рж╕рзНржмрж╛рж╕рзНржерзНржп рж▓ржХрзНрж╖рзНржп**
- **ржУржЬржи ржирж┐ржпрж╝ржирзНрждрзНрж░ржг:** рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ BMI ржмржЬрж╛ржпрж╝ рж░рж╛ржЦрзБржи
- **рж░ржХрзНрждржЪрж╛ржк:** ржирж┐ржпрж╝ржорж┐ржд рж░ржХрзНрждржЪрж╛ржк ржЪрзЗржХ ржХрж░рзБржи
- **рж░ржХрзНрждрзЗ рж╢рж░рзНржХрж░рж╛:** ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржЭрзБржБржХрж┐ ржХржо рж░рж╛ржЦрзБржи
- **ржХрзЛрж▓рзЗрж╕рзНржЯрзЗрж░рж▓:** рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ ржХрзЛрж▓рзЗрж╕рзНржЯрзЗрж░рж▓ ржорж╛рждрзНрж░рж╛

#### ЁЯеЧ **ржЦрж╛ржжрзНржпрж╛ржнрзНржпрж╛рж╕**
- **рж╕ржХрж╛рж▓рзЗрж░ ржирж╛рж╕рзНрждрж╛:** ржХржЦржиржУ ржмрж╛ржж ржжрж┐ржмрзЗржи ржирж╛
- **ржорж╛ржЭрж╛рж░рж┐ ржЦрж╛ржмрж╛рж░:** ржжрж┐ржирзЗ рзй ржмрж╛рж░ ржкрзНрж░ржзрж╛ржи ржЦрж╛ржмрж╛рж░
- **рж╕рзНржирзНржпрж╛ржХрж╕:** рж╕рзНржмрж╛рж╕рзНржерзНржпржХрж░ рж╕рзНржирзНржпрж╛ржХрж╕ ржЦрж╛ржи
- **ржЬрж▓:** ржкрж░рзНржпрж╛ржкрзНржд ржкрж╛ржирж┐ ржкрж╛ржи ржХрж░рзБржи

#### ЁЯПГтАНтЩВя╕П **рж╢рж╛рж░рзАрж░рж┐ржХ ржХрж╛рж░рзНржпржХрж▓рж╛ржк**
- **ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржо:** рж╕ржкрзНрждрж╛рж╣рзЗ рззрзлрзж ржорж┐ржирж┐ржЯ
- **рж╢ржХрзНрждрж┐ ржкрзНрж░рж╢рж┐ржХрзНрж╖ржг:** рж╕ржкрзНрждрж╛рж╣рзЗ рзи ржжрж┐ржи
- **ржиржоржирзАржпрж╝рждрж╛:** рж╕рзНржЯрзНрж░рзЗржЪрж┐ржВ ржПржмржВ ржпрзЛржЧржмрзНржпрж╛ржпрж╝рж╛ржо
- **рж╕ржХрзНрж░рж┐ржпрж╝ ржЬрзАржмржиржпрж╛ржкржи:** ржмрзЗрж╢рж┐ рж╣рж╛ржБржЯрж╛, ржХржо ржмрж╕рж╛

### ЁЯзШтАНтЩАя╕П **ржорж╛ржирж╕рж┐ржХ рж╕рзБрж╕рзНржерждрж╛**

#### ЁЯШК **ржЗрждрж┐ржмрж╛ржЪржХ ржоржирзЛржнрж╛ржм**
- **ржХрзГрждржЬрзНржЮрждрж╛:** ржкрзНрж░рждрж┐ржжрж┐ржи ржХрзГрждржЬрзНржЮрждрж╛ ржкрзНрж░ржХрж╛рж╢ ржХрж░рзБржи
- **ржЖрждрзНржоржмрж┐рж╢рзНржмрж╛рж╕:** ржирж┐ржЬрзЗрж░ ржЙржкрж░ ржмрж┐рж╢рзНржмрж╛рж╕ рж░рж╛ржЦрзБржи
- **рж╕рж╣ржирж╢рзАрж▓рждрж╛:** ржЕржирзНржпржжрзЗрж░ ржкрзНрж░рждрж┐ рж╕рж╣ржирж╢рзАрж▓ рж╣ржи
- **ржЖрж╢рж╛ржмрж╛ржж:** ржнржмрж┐рж╖рзНржпрждрзЗрж░ ржкрзНрж░рждрж┐ ржЖрж╢рж╛ржмрж╛ржжрзА рж╣ржи
            """
        ]
        
        return random.choice(advice_templates)
    
    def process_query(self, query: str) -> str:
        """Process user query and generate enhanced response"""
        self.conversation_history.append({
            "user": query, 
            "timestamp": datetime.now(),
            "query_type": "medicine" if not self.is_health_question(query) else "health"
        })
        
        if self.is_health_question(query):
            return self.generate_enhanced_health_advice(query)
        
        medicine_info = self.find_medicine_info(query)
        return self.generate_super_detailed_response(query, medicine_info)
    
    def is_health_question(self, query: str) -> bool:
        """Check if query is about general health"""
        health_keywords = [
            'рж╕рзНржмрж╛рж╕рзНржерзНржп', 'ржкрж░рж╛ржорж░рзНрж╢', 'ржЙржкржжрзЗрж╢', 'ржЬрзАржмржиржпрж╛ржкржи', 'ржмрзНржпрж╛ржпрж╝рж╛ржо', 
            'ржЦрж╛ржмрж╛рж░', 'ржШрзБржо', 'рж╕рзБрж╕рзНрже', 'ржлрж┐ржЯржирзЗрж╕', 'ржкрзБрж╖рзНржЯрж┐', 'ржбрж╛ржпрж╝рзЗржЯ'
        ]
        query_lower = query.lower()
        return any(keyword in query_lower for keyword in health_keywords)
    
    def get_analytics(self) -> Dict[str, Any]:
        """Get chatbot analytics"""
        return {
            "total_queries": len(self.conversation_history),
            "medicine_queries": len([q for q in self.conversation_history if q.get("query_type") == "medicine"]),
            "health_queries": len([q for q in self.conversation_history if q.get("query_type") == "health"]),
            "popular_searches": dict(sorted(self.search_analytics.items(), key=lambda x: x[1], reverse=True)[:5])
        }

def main():
    """Main application with enhanced features"""
    
    # Enhanced header
    st.markdown('<h1 class="main-header">ЁЯЪА рж╕рзБржкрж╛рж░ ржЙржирзНржиржд AI ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align: center; font-size: 1.2rem; color: #666;">ChatGPT/Cursor AI рж╕рзНржЯрж╛ржЗрж▓рзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ ржорж╛ржирзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржПржмржВ рж╕рзБржирзНржжрж░ ржЙрждрзНрждрж░ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ</p>', unsafe_allow_html=True)
    
    # Enhanced sidebar
    with st.sidebar:
        st.markdown("## ЁЯОЫя╕П **ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржкрзНржпрж╛ржирзЗрж▓**")
        
        # About section
        with st.expander("тД╣я╕П **рж╕ржорзНржкрж░рзНржХрзЗ**", expanded=True):
            st.info("""
            **ЁЯЪА рж╕рзБржкрж╛рж░ ржЙржирзНржиржд AI ржЪрзНржпрж╛ржЯржмржЯ**
            
            **тЬи ржмрзИрж╢рж┐рж╖рзНржЯрзНржпрж╕ржорзВрж╣:**
            - ЁЯФН рж╕рзНржорж╛рж░рзНржЯ ржЕржирзБрж╕ржирзНржзрж╛ржи
            - ЁЯУЛ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп
            - ЁЯТб рж╕рж╣рж╛ржпрж╝ржХ ржкрж░рж╛ржорж░рзНрж╢
            - ЁЯОи рж╕рзБржирзНржжрж░ UI
            - ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи
            - ЁЯФД ржЪрзНржпрж╛ржЯ ржЗрждрж┐рж╣рж╛рж╕
            """)
        
        # Statistics
        if 'chatbot' in st.session_state:
            analytics = st.session_state.chatbot.get_analytics()
            
            st.markdown("### ЁЯУК **ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи**")
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("ржорзЛржЯ ржкрзНрж░рж╢рзНржи", analytics["total_queries"])
                st.metric("ржорзЗржбрж┐рж╕рж┐ржи ржкрзНрж░рж╢рзНржи", analytics["medicine_queries"])
            
            with col2:
                st.metric("рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрзНрж░рж╢рзНржи", analytics["health_queries"])
            
            # Popular searches
            if analytics["popular_searches"]:
                st.markdown("### ЁЯФе **ржЬржиржкрзНрж░рж┐ржпрж╝ ржЕржирзБрж╕ржирзНржзрж╛ржи**")
                for search, count in analytics["popular_searches"].items():
                    st.text(f"тАв {search}: {count} ржмрж╛рж░")
        
        # Clear chat button
        if st.button("ЁЯЧСя╕П ржЪрзНржпрж╛ржЯ ржорзБржЫрзБржи", use_container_width=True):
            if 'chatbot' in st.session_state:
                st.session_state.chatbot.conversation_history = []
                st.session_state.chatbot.search_analytics.clear()
            st.rerun()
    
    # Initialize chatbot
    if 'chatbot' not in st.session_state:
        st.session_state.chatbot = SuperAdvancedMedicineChatbot()
    
    # Main chat interface
    st.markdown("## ЁЯТм **ржЪрзНржпрж╛ржЯ ржХрж░рзБржи**")
    
    # Enhanced chat input
    user_input = st.text_input(
        "ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржи рж▓рж┐ржЦрзБржи:",
        placeholder="ржпрзЗржоржи: Paracetamol, Aspirin, ржЬрзНржмрж░рзЗрж░ ржорзЗржбрж┐рж╕рж┐ржи, ржмрж╛ рж╕рж╛ржзрж╛рж░ржг рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢..."
    )
    
    # Send button
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        send_button = st.button("ЁЯЪА ржЙрждрзНрждрж░ ржкрж╛ржи", use_container_width=True)
    
    # Process query
    if send_button and user_input:
        with st.spinner("ЁЯдЦ рж╕рж░рзНржмрзЛржЪрзНржЪ ржорж╛ржирзЗрж░ ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."):
            response = st.session_state.chatbot.process_query(user_input)
            
            # Display response in enhanced container
            st.markdown("---")
            st.markdown('<div class="chat-container">', unsafe_allow_html=True)
            st.markdown(response, unsafe_allow_html=True)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Add to chat history
            st.session_state.chatbot.conversation_history.append({
                "bot": response, 
                "timestamp": datetime.now()
            })
    
    # Enhanced example queries
    st.markdown("## ЁЯТб **ржЙржжрж╛рж╣рж░ржг ржкрзНрж░рж╢рзНржи**")
    
    example_categories = {
        "ЁЯТК ржорзЗржбрж┐рж╕рж┐ржи ржЕржирзБрж╕ржирзНржзрж╛ржи": [
            "Paracetamol рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж╛ржирждрзЗ ржЪрж╛ржЗ",
            "Aspirin ржПрж░ ржкрж╛рж░рзНрж╢рзНржм ржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржХрзА?",
            "ржЬрзНржмрж░рзЗрж░ ржЬржирзНржп ржХрзЛржи ржорзЗржбрж┐рж╕рж┐ржи ржнрж╛рж▓рзЛ?"
        ],
        "ЁЯПе рж╕рзНржмрж╛рж╕рзНржерзНржп ржкрж░рж╛ржорж░рзНрж╢": [
            "рж╕рзБрж╕рзНрже ржерж╛ржХрж╛рж░ ржЬржирзНржп ржкрж░рж╛ржорж░рзНрж╢ ржжрж┐ржи",
            "ржирж┐ржпрж╝ржорж┐ржд ржмрзНржпрж╛ржпрж╝рж╛ржорзЗрж░ ржЙржкржХрж╛рж░рж┐рждрж╛",
            "ржорж╛ржирж╕рж┐ржХ рж╕рзНржмрж╛рж╕рзНржерзНржп ржнрж╛рж▓рзЛ рж░рж╛ржЦрж╛рж░ ржЙржкрж╛ржпрж╝"
        ]
    }
    
    for category, queries in example_categories.items():
        st.markdown(f"### {category}")
        cols = st.columns(len(queries))
        for i, query in enumerate(queries):
            with cols[i]:
                if st.button(query, key=f"example_{category}_{i}"):
                    with st.spinner("ЁЯдЦ рж╕рж░рзНржмрзЛржЪрзНржЪ ржорж╛ржирзЗрж░ ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ..."):
                        response = st.session_state.chatbot.process_query(query)
                        st.markdown("---")
                        st.markdown('<div class="chat-container">', unsafe_allow_html=True)
                        st.markdown(response, unsafe_allow_html=True)
                        st.markdown('</div>', unsafe_allow_html=True)
    
    # Enhanced footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; padding: 2rem;'>
        <h3>ЁЯЪА рж╕рзБржкрж╛рж░ ржЙржирзНржиржд AI ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ</h3>
        <p>ChatGPT/Cursor AI рж╕рзНржЯрж╛ржЗрж▓рзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ ржорж╛ржирзЗрж░ ржЙрждрзНрждрж░ ржкрзНрж░ржжрж╛ржи ржХрж░рзЗ</p>
        <p>тЪая╕П ржПржЗ рждржерзНржпржЧрзБрж▓рзЛ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╢рж┐ржХрзНрж╖рж╛ржорзВрж▓ржХ ржЙржжрзНржжрзЗрж╢рзНржпрзЗред ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред</p>
        <p>ЁЯЖШ ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝: рзпрзпрзп</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
