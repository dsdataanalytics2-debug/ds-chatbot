#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ЁЯТК рж╕рж░рж▓ ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ
"""

import os
import sys
import json
import re
from pathlib import Path

class SimpleMedicineChatbot:
    def __init__(self):
        self.medicines = []
        self.load_data()
    
    def load_data(self):
        """Excel ржлрж╛ржЗрж▓ ржерзЗржХрзЗ ржбрзЗржЯрж╛ рж▓рзЛржб ржХрж░рзБржи"""
        try:
            # Try to import pandas
            import pandas as pd
            excel_file = Path("medicine_data.xlsx")
            if excel_file.exists():
                df = pd.read_excel(excel_file)
                self.medicines = df.to_dict('records')
                print(f"тЬЕ {len(self.medicines)} ржЯрж┐ ржорзЗржбрж┐рж╕рж┐ржи рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ")
            else:
                print("тЭМ medicine_data.xlsx ржлрж╛ржЗрж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐!")
                self.create_sample_data()
        except ImportError:
            print("тЪая╕П pandas ржЗржирж╕рзНржЯрж▓ ржирзЗржЗ, рж╕рзНржпрж╛ржорзНржкрж▓ ржбрзЗржЯрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ")
            self.create_sample_data()
    
    def create_sample_data(self):
        """рж╕рзНржпрж╛ржорзНржкрж▓ ржбрзЗржЯрж╛ рждрзИрж░рж┐ ржХрж░рзБржи"""
        self.medicines = [
            {
                'Medicine Name': 'Paracetamol',
                'Generic Name': 'Acetaminophen',
                'Uses': 'ржЬрзНржмрж░, ржмрзНржпржерж╛',
                'Side Effects': 'ржорж╛ржерж╛ржмрзНржпржерж╛, ржмржорж┐',
                'Dosage': '500-1000mg',
                'Price (рз│)': 5
            },
            {
                'Medicine Name': 'Ibuprofen',
                'Generic Name': 'Ibuprofen',
                'Uses': 'ржмрзНржпржерж╛, ржкрзНрж░ржжрж╛рж╣',
                'Side Effects': 'ржкрзЗржЯрзЗ ржмрзНржпржерж╛',
                'Dosage': '200-400mg',
                'Price (рз│)': 8
            },
            {
                'Medicine Name': 'Omeprazole',
                'Generic Name': 'Omeprazole',
                'Uses': 'ржкрзЗржЯрзЗрж░ ржЖрж▓рж╕рж╛рж░',
                'Side Effects': 'ржорж╛ржерж╛ржмрзНржпржерж╛',
                'Dosage': '20mg',
                'Price (рз│)': 15
            }
        ]
        print("тЬЕ рж╕рзНржпрж╛ржорзНржкрж▓ ржбрзЗржЯрж╛ рж▓рзЛржб рж╣ржпрж╝рзЗржЫрзЗ")
    
    def search_medicines(self, query):
        """ржорзЗржбрж┐рж╕рж┐ржи ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи"""
        if not query.strip():
            return []
        
        query = query.lower()
        results = []
        
        for medicine in self.medicines:
            score = 0
            for key, value in medicine.items():
                if isinstance(value, str):
                    if query in str(value).lower():
                        score += 1
                elif isinstance(value, (int, float)):
                    if query in str(value):
                        score += 1
            
            if score > 0:
                results.append((medicine, score))
        
        # Sort by score (highest first)
        results.sort(key=lambda x: x[1], reverse=True)
        return [medicine for medicine, score in results]
    
    def get_medicine_details(self, medicine):
        """ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп ржжрж┐ржи"""
        details = []
        for key, value in medicine.items():
            details.append(f"**{key}:** {value}")
        return "\n".join(details)
    
    def run(self):
        """ржЪрзНржпрж╛ржЯржмржЯ ржЪрж╛рж▓рж╛ржи"""
        print("=" * 60)
        print("ЁЯТК рж╕рж░рж▓ ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ")
        print("=" * 60)
        print("ЁЯФН ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ ржирж╛ржо, ржмрзНржпржмрж╣рж╛рж░, ржкрж╛рж░рзНрж╢рзНржмржкрзНрж░рждрж┐ржХрзНрж░рж┐ржпрж╝рж╛ ржЗрждрзНржпрж╛ржжрж┐ рж▓рж┐ржЦрзЗ ржЕржирзБрж╕ржирзНржзрж╛ржи ржХрж░рзБржи")
        print("ЁЯЫС ржмржирзНржз ржХрж░рждрзЗ 'quit' ржмрж╛ 'exit' рж▓рж┐ржЦрзБржи")
        print("-" * 60)
        
        while True:
            try:
                query = input("\nЁЯТм ржЖржкржирж┐ ржХрж┐ ржЦрзБржБржЬржЫрзЗржи? ").strip()
                
                if query.lower() in ['quit', 'exit', 'ржмржирзНржз', 'q']:
                    print("ЁЯСЛ ржзржирзНржпржмрж╛ржж! ржЖржмрж╛рж░ ржЖрж╕ржмрзЗржи!")
                    break
                
                if not query:
                    print("тЪая╕П ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржХрж┐ржЫрзБ рж▓рж┐ржЦрзБржи")
                    continue
                
                results = self.search_medicines(query)
                
                if results:
                    print(f"\nтЬЕ {len(results)} ржЯрж┐ ржлрж▓рж╛ржлрж▓ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ:")
                    print("-" * 40)
                    
                    for i, medicine in enumerate(results[:5], 1):  # Show max 5 results
                        print(f"\n{i}. **{medicine.get('Medicine Name', 'N/A')}**")
                        print(f"   Generic: {medicine.get('Generic Name', 'N/A')}")
                        print(f"   Uses: {medicine.get('Uses', 'N/A')}")
                        print(f"   Dosage: {medicine.get('Dosage', 'N/A')}")
                        print(f"   Price: рз│{medicine.get('Price (рз│)', 'N/A')}")
                        
                        # Ask if user wants more details
                        choice = input(f"\n{i} ржиржорзНржмрж░ ржорзЗржбрж┐рж╕рж┐ржирзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд ржжрзЗржЦрждрзЗ ржЪрж╛ржи? (y/n): ").lower().strip()
                        if choice in ['y', 'yes', 'рж╣рзНржпрж╛ржБ']:
                            print("\nЁЯУЛ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп:")
                            print("-" * 30)
                            print(self.get_medicine_details(medicine))
                            print("-" * 30)
                else:
                    print("тЭМ ржХрзЛржирзЛ ржорзЗржбрж┐рж╕рж┐ржи ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐")
                    print("ЁЯТб ржЕржирзНржп ржХрзАржУржпрж╝рж╛рж░рзНржб ржжрж┐ржпрж╝рзЗ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи")
                    
            except KeyboardInterrupt:
                print("\nЁЯСЛ ржзржирзНржпржмрж╛ржж! ржЖржмрж╛рж░ ржЖрж╕ржмрзЗржи!")
                break
            except Exception as e:
                print(f"тЭМ рждрзНрж░рзБржЯрж┐: {e}")

def main():
    """ржорзЗржЗржи ржлрж╛ржВрж╢ржи"""
    chatbot = SimpleMedicineChatbot()
    chatbot.run()

if __name__ == "__main__":
    main()
