#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple test for expert response format
"""

def format_expert_response(query: str, excel_results, all_source_results):
    """‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞ Dibedex ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞"""
    try:
        parts = []
        
        if not excel_results and not all_source_results:
            parts.append("‚ùå **‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶è‡¶Æ‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§**\n")
            return "".join(parts)

        # ‡¶Æ‡ßÇ‡¶≤ ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø - ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá
        if excel_results:
            top = excel_results[0]
            
            # Name
            name = top.get('Medicine Name', top.get('Name', 'N/A'))
            parts.append(f"**Name:**{name}\n")
            
            # Regular Price
            price = top.get('Price (‡ß≥)', top.get('Regular Price', 'N/A'))
            parts.append(f"**Regular Price:**{price}\n")
            
            # Company Name
            company = top.get('Company Name', top.get('Manufacturer', 'N/A'))
            parts.append(f"**Company Name:**{company}\n")
            
            # Medicine Group
            group = top.get('Medicine Group', top.get('Category', 'N/A'))
            parts.append(f"**Medicine Group:**{group}\n")
            
            # ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ
            uses = top.get('Uses', top.get('‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ', 'N/A'))
            parts.append(f"**‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ:**{uses}\n")
            
            # ‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï)
            adult_dosage = top.get('Dosage', top.get('‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï)', 'nan'))
            parts.append(f"**‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá):**{adult_dosage}\n")
            
            # ‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶ï‡¶ø‡¶∂‡ßã‡¶∞)
            child_dosage = top.get('Child Dosage', top.get('‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá)', 'nan'))
            parts.append(f"**‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá):**{child_dosage}\n")
            
            # ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø
            details = top.get('Description', top.get('‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø', 'N/A'))
            parts.append(f"**‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**\n")
            parts.append(f"**‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**{details}\n")

        # ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø
        if all_source_results:
            for i, r in enumerate(all_source_results[:2], 1):
                ctx = r.get('context') or r.get('full_content', '')
                if ctx:
                    cleaned_ctx = ctx.strip()
                    if len(cleaned_ctx) > 300:
                        cleaned_ctx = cleaned_ctx[:300] + "..."
                    
                    if i == 1:
                        parts.append(f"{cleaned_ctx}\n")

        return "".join(parts)
    except Exception as e:
        return f"‚ùå ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}"

def test_expert_format():
    """Test the expert response format"""
    
    # Sample Excel data
    sample_excel_data = [{
        'Medicine Name': 'Dibedex 60 capsules',
        'Price (‡ß≥)': '900',
        'Company Name': 'Index Laboratories (AyU) Ltd.',
        'Medicine Group': 'Ayurvedic',
        'Uses': '‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏ ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞',
        'Dosage': 'nan',
        'Child Dosage': 'nan',
        'Description': '‡¶Ø‡¶æ ‡¶Æ‡ßÇ‡¶≤‡¶§ ‡¶∏‡¶ú‡¶®‡ßá ‡¶™‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶Ø‡¶æ‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡ßà‡¶∞‡¶ø, ‡¶∂‡¶∞‡ßÄ‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßá‡¶∂ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶â‡¶™‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ó‡ßÅ‡¶£‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶∞‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§'
    }]
    
    # Sample source data
    sample_source_data = [{
        'context': '‡¶∏‡¶ú‡¶®‡ßá ‡¶™‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶Ø‡¶æ‡¶∏ ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡•§ ‡¶è‡¶ü‡¶ø ‡¶∞‡¶ï‡ßç‡¶§‡ßá ‡¶∂‡¶∞‡ßç‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶á‡¶®‡¶∏‡ßÅ‡¶≤‡¶ø‡¶® ‡¶∏‡¶Ç‡¶¨‡ßá‡¶¶‡¶®‡¶∂‡ßÄ‡¶≤‡¶§‡¶æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶ï‡¶∞‡ßá‡•§'
    }]
    
    # Test the expert format
    query = "Dibedex"
    response = format_expert_response(query, sample_excel_data, sample_source_data)
    
    print("=" * 60)
    print("üß™ Expert Format Test Results")
    print("=" * 60)
    print(response)
    print("=" * 60)
    
    # Check if the format matches the expected structure
    expected_fields = [
        "**Name:**",
        "**Regular Price:**",
        "**Company Name:**",
        "**Medicine Group:**",
        "**‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ:**",
        "**‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá):**",
        "**‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá):**",
        "**‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**",
        "**‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**"
    ]
    
    print("\n‚úÖ Format Verification:")
    for field in expected_fields:
        if field in response:
            print(f"  ‚úì {field} found")
        else:
            print(f"  ‚ùå {field} missing")
    
    print("\nüéØ Expert format test completed!")

if __name__ == "__main__":
    test_expert_format()
