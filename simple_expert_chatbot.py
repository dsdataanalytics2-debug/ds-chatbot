#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Simple Expert Mode Chatbot Demo
"""

import pandas as pd

def format_expert_response(query: str, excel_results, all_source_results):
    """ржПржХрзНрж╕ржкрж╛рж░рзНржЯ ржбрзЗржнрзЗрж▓ржкрж╛рж░ Dibedex ржПрж░ ржЬржирзНржп ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржлрж░ржорзНржпрж╛ржЯрзЗ ржЙрждрзНрждрж░"""
    try:
        parts = []
        
        if not excel_results and not all_source_results:
            parts.append("тЭМ **ржжрзБржГржЦрж┐ржд, ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржирзЗрж░ рж╕рж╛ржерзЗ ржорж┐рж▓рзЗ ржПржоржи рждржерзНржп ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред**\n")
            return "".join(parts)

        # ржорзВрж▓ ржУрж╖рзБржзрзЗрж░ рждржерзНржп - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржлрж░ржорзНржпрж╛ржЯрзЗ
        if excel_results:
            top = excel_results[0]
            
            # Name - рж╕ржарж┐ржХ ржХрж▓рж╛ржо ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░
            name = top.get('Name', 'N/A')
            parts.append(f"**Name:**{name}\n")
            
            # Regular Price - рж╕ржарж┐ржХ ржХрж▓рж╛ржо ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░
            price = top.get('Regular Price', 'N/A')
            parts.append(f"**Regular Price:**{price}\n")
            
            # Company Name - рж╕ржарж┐ржХ ржХрж▓рж╛ржо ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░
            company = top.get('Company Name', 'N/A')
            parts.append(f"**Company Name:**{company}\n")
            
            # Medicine Group - рж╕ржарж┐ржХ ржХрж▓рж╛ржо ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░
            group = top.get('Medicine Group', 'N/A')
            parts.append(f"**Medicine Group:**{group}\n")
            
            # ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ - рж╕ржарж┐ржХ ржХрж▓рж╛ржо ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░ ржПржмржВ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛
            uses = top.get('ржУрж╖рзБржзрзЗрж░ ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛', 'N/A')
            # "ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ :" ржЕржВрж╢ рж╕рж░рж╛ржирзЛ
            if isinstance(uses, str) and 'ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ :' in uses:
                uses = uses.replace('ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ :', '').strip()
            parts.append(f"**ржУрж╖рзБржзрзЗрж░ ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛:**{uses}\n")
            
            # ржЦрж╛ржУржпрж╝рж╛рж░ ржирж┐ржпрж╝ржо (ржкрзНрж░рж╛ржкрзНрждржмржпрж╝рж╕рзНржХ) - рж╕ржарж┐ржХ ржХрж▓рж╛ржо ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░
            adult_dosage = top.get('ржЦрж╛ржУржпрж╝рж╛рж░ ржирж┐ржпрж╝ржо( ржкрзНрж░рж╛ржкрзНрждржмржпрж╝рж╕рзНржХ ржХрзНрж╖рзЗрждрзНрж░рзЗ)', 'nan')
            parts.append(f"**ржЦрж╛ржУржпрж╝рж╛рж░ ржирж┐ржпрж╝ржо (ржкрзНрж░рж╛ржкрзНрждржмржпрж╝рж╕рзНржХ ржХрзНрж╖рзЗрждрзНрж░рзЗ):**{adult_dosage}\n")
            
            # ржЦрж╛ржУржпрж╝рж╛рж░ ржирж┐ржпрж╝ржо (ржХрж┐рж╢рзЛрж░) - рж╕ржарж┐ржХ ржХрж▓рж╛ржо ржирж╛ржо ржмрзНржпржмрж╣рж╛рж░
            child_dosage = top.get('ржЦрж╛ржУржпрж╝рж╛рж░ ржирж┐ржпрж╝ржо( ржХрж┐рж╢рзЛрж░ржжрзЗрж░  ржХрзНрж╖рзЗрждрзНрж░рзЗ)', 'nan')
            parts.append(f"**ржЦрж╛ржУржпрж╝рж╛рж░ ржирж┐ржпрж╝ржо (ржХрж┐рж╢рзЛрж░ржжрзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ):**{child_dosage}\n")
            
            # ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп - ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ ржерзЗржХрзЗ ржирзЗржУржпрж╝рж╛ ржПржмржВ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржХрж░рж╛
            details = top.get('ржУрж╖рзБржзрзЗрж░ ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛', 'N/A')
            if isinstance(details, str) and 'ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ :' in details:
                details = details.replace('ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ :', '').strip()
            parts.append(f"**ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп:**\n")
            parts.append(f"**ржУрж╖рзБржзрзЗрж░ ржмрж┐рж╕рзНрждрж╛рж░рж┐ржд рждржерзНржп:**{details}\n")

        # ржЕрждрж┐рж░рж┐ржХрзНржд рждржерзНржп
        if all_source_results:
            for i, r in enumerate(all_source_results[:2], 1):
                ctx = r.get('context') or r.get('full_content', '')
                if ctx:
                    cleaned_ctx = ctx.strip()
                    if len(cleaned_ctx) > 300:
                        cleaned_ctx = cleaned_ctx[:300] + "..."
                    
                    if i == 1:
                        parts.append(f"{cleaned_ctx}\n")

        return "".join(parts)
    except Exception as e:
        return f"тЭМ ржПржХрзНрж╕ржкрж╛рж░рзНржЯ рж░рзЗрж╕ржкржирзНрж╕ рждрзИрж░рж┐ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}"

def simple_chatbot():
    """Simple chatbot with Expert Mode"""
    
    print("=" * 70)
    print("ЁЯТК Simple Expert Mode Chatbot")
    print("=" * 70)
    print("тЬЕ Expert Mode (Dibedex Format) is ENABLED")
    print("ЁЯФН Type a medicine name to get information in Expert format")
    print("тЭМ Type 'quit' to exit")
    print("=" * 70)
    
    # Load Excel data
    try:
        df = pd.read_excel('medicine_data.xlsx')
        print(f"ЁЯУК Loaded {len(df)} medicines from Excel")
    except Exception as e:
        print(f"тЭМ Error loading Excel file: {e}")
        return
    
    while True:
        query = input("\nЁЯФН Enter medicine name: ").strip()
        
        if query.lower() in ['quit', 'exit', 'q']:
            print("ЁЯСЛ Goodbye!")
            break
        
        if not query:
            continue
        
        # Search for medicine
        search_results = []
        for _, row in df.iterrows():
            if query.lower() in str(row['Name']).lower():
                search_results.append(row.to_dict())
        
        if not search_results:
            print("тЭМ Medicine not found. Try another name.")
            continue
        
        # Simulate source results
        source_results = [{
            'context': 'рж╕ржЬржирзЗ ржкрж╛рждрж╛рж░ ржирж┐рж░рзНржпрж╛рж╕ ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕ ржирж┐ржпрж╝ржирзНрждрзНрж░ржгрзЗ ржмрж┐рж╢рзЗрж╖ржнрж╛ржмрзЗ ржХрж╛рж░рзНржпржХрж░ред ржПржЯрж┐ рж░ржХрзНрждрзЗ рж╢рж░рзНржХрж░рж╛рж░ ржорж╛рждрзНрж░рж╛ ржирж┐ржпрж╝ржирзНрждрзНрж░ржг ржХрж░рзЗ ржПржмржВ ржЗржирж╕рзБрж▓рж┐ржи рж╕ржВржмрзЗржжржирж╢рзАрж▓рждрж╛ ржмрзГржжрзНржзрж┐ ржХрж░рзЗред'
        }]
        
        # Generate response using Expert Mode
        response = format_expert_response(query, search_results, source_results)
        
        print("\nЁЯТК Expert Mode Response:")
        print("-" * 50)
        print(response)
        print("-" * 50)

if __name__ == "__main__":
    simple_chatbot()
