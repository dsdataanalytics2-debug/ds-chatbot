#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ЁЯТК ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ - ржЕржЯрзЛржорзЗржЯрж┐ржХ рж╕рзЗржЯржЖржк ржПржмржВ рж░рж╛ржи рж╕рзНржХрзНрж░рж┐ржкрзНржЯ
"""

import os
import sys
import subprocess
import platform
import shutil
from pathlib import Path

def print_banner():
    """ржкрзНрж░рж┐ржирзНржЯ ржмрзНржпрж╛ржирж╛рж░"""
    print("=" * 60)
    print("ЁЯТК ржорзЗржбрж┐рж╕рж┐ржи ржЪрзНржпрж╛ржЯржмржЯ - ржЕржЯрзЛржорзЗржЯрж┐ржХ рж╕рзЗржЯржЖржк")
    print("=" * 60)
    print()

def check_python():
    """Python ржнрж╛рж░рзНрж╕ржи ржЪрзЗржХ ржХрж░рзБржи"""
    print("ЁЯРН Python ржнрж╛рж░рзНрж╕ржи ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    try:
        version = sys.version_info
        print(f"тЬЕ Python {version.major}.{version.minor}.{version.micro} ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ")
        if version.major < 3 or (version.major == 3 and version.minor < 7):
            print("тЭМ Python 3.7+ ржкрзНрж░ржпрж╝рзЛржЬржи!")
            return False
        return True
    except Exception as e:
        print(f"тЭМ Python ржЪрзЗржХ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return False

def create_virtual_environment():
    """ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рзБржи"""
    print("\nЁЯФз ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    
    venv_path = Path("venv")
    if venv_path.exists():
    
        print("тЬЕ ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ ржЗрждрж┐ржоржзрзНржпрзЗ ржмрж┐ржжрзНржпржорж╛ржи")
        return True
    
    try:
        # Use 'py' command for Windows
        if platform.system() == "Windows":
            subprocess.run(["py", "-m", "venv", "venv"], check=True)
        else:
            subprocess.run([sys.executable, "-m", "venv", "venv"], check=True)
        print("тЬЕ ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ рж╕ржлрж▓ржнрж╛ржмрзЗ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"тЭМ ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ ржПржиржнрж╛ржпрж╝рж░ржиржорзЗржирзНржЯ рждрзИрж░рж┐ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return False

def get_activate_script():
    """ржЕржкрж╛рж░рзЗржЯрж┐ржВ рж╕рж┐рж╕рзНржЯрзЗржо ржЕржирзБржпрж╛ржпрж╝рзА ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗржЯ рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржкрж╛рже ржжрж┐ржи"""
    if platform.system() == "Windows":
        return "venv\\Scripts\\activate"
    else:
        return "venv/bin/activate"

def install_requirements():
    """ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржкрзНржпрж╛ржХрзЗржЬ ржЗржирж╕рзНржЯрж▓ ржХрж░рзБржи"""
    print("\nЁЯУж ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржкрзНржпрж╛ржХрзЗржЬ ржЗржирж╕рзНржЯрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    
    try:
        # Use 'py -m pip' for Windows
        if platform.system() == "Windows":
            # Upgrade pip first
            subprocess.run(["py", "-m", "pip", "install", "--upgrade", "pip"], check=True)
            print("тЬЕ pip ржЖржкржЧрзНрж░рзЗржб рж╣ржпрж╝рзЗржЫрзЗ")
            
            # Install requirements
            subprocess.run(["py", "-m", "pip", "install", "-r", "requirements.txt"], check=True)
            print("тЬЕ рж╕ржм ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржкрзНржпрж╛ржХрзЗржЬ ржЗржирж╕рзНржЯрж▓ рж╣ржпрж╝рзЗржЫрзЗ")
        else:
            # Get pip path for other systems
            pip_path = "venv/bin/pip"
            subprocess.run([pip_path, "install", "--upgrade", "pip"], check=True)
            print("тЬЕ pip ржЖржкржЧрзНрж░рзЗржб рж╣ржпрж╝рзЗржЫрзЗ")
            subprocess.run([pip_path, "install", "-r", "requirements.txt"], check=True)
            print("тЬЕ рж╕ржм ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржкрзНржпрж╛ржХрзЗржЬ ржЗржирж╕рзНржЯрж▓ рж╣ржпрж╝рзЗржЫрзЗ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"тЭМ ржкрзНржпрж╛ржХрзЗржЬ ржЗржирж╕рзНржЯрж▓ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return False

def check_excel_file():
    """Excel ржлрж╛ржЗрж▓ ржЪрзЗржХ ржХрж░рзБржи"""
    print("\nЁЯУК Excel ржлрж╛ржЗрж▓ ржЪрзЗржХ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    
    excel_file = Path("medicine_data.xlsx")
    if excel_file.exists():
        print(f"тЬЕ {excel_file} ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ")
        return True 
    else:
        print(f"тЭМ {excel_file} ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐!")
        print("ЁЯТб ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржкржирж╛рж░ Excel ржлрж╛ржЗрж▓ржЯрж┐ ржкрзНрж░ржЬрзЗржХрзНржЯ ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж░рж╛ржЦрзБржи")
        return False

def run_chatbot():
    """ржЪрзНржпрж╛ржЯржмржЯ ржЪрж╛рж▓рзБ ржХрж░рзБржи"""
    print("\nЁЯЪА ржЪрзНржпрж╛ржЯржмржЯ ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
    print("ЁЯМР ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ http://localhost:8501 ржП ржпрж╛ржи")
    print("ЁЯЫС ржмржирзНржз ржХрж░рждрзЗ Ctrl+C ржЪрж╛ржкрзБржи")
    print("-" * 60)
    
    try:
        # Use 'py -m streamlit' for Windows
        if platform.system() == "Windows":
            subprocess.run(["py", "-m", "streamlit", "run", "medicine_chatbot.py"])
        else:
            streamlit_path = "venv/bin/streamlit"
            subprocess.run([streamlit_path, "run", "medicine_chatbot.py"])
    except KeyboardInterrupt:
        print("\nЁЯСЛ ржЪрзНржпрж╛ржЯржмржЯ ржмржирзНржз ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ")
    except subprocess.CalledProcessError as e:
        print(f"тЭМ ржЪрзНржпрж╛ржЯржмржЯ ржЪрж╛рж▓рзБ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")

def create_sample_excel():
    """рж╕рзНржпрж╛ржорзНржкрж▓ Excel ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзБржи"""
    print("\nЁЯУЭ рж╕рзНржпрж╛ржорзНржкрж▓ Excel ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...")
    
    try:
        import pandas as pd
        
        # Sample medicine data
        sample_data = {
            'Medicine Name': ['Paracetamol', 'Ibuprofen', 'Omeprazole', 'Cetirizine', 'Metformin'],
            'Generic Name': ['Acetaminophen', 'Ibuprofen', 'Omeprazole', 'Cetirizine', 'Metformin'],
            'Uses': ['ржЬрзНржмрж░, ржмрзНржпржерж╛', 'ржмрзНржпржерж╛, ржкрзНрж░ржжрж╛рж╣', 'ржкрзЗржЯрзЗрж░ ржЖрж▓рж╕рж╛рж░', 'ржЕрзНржпрж╛рж▓рж╛рж░рзНржЬрж┐', 'ржбрж╛ржпрж╝рж╛ржмрзЗржЯрж┐рж╕'],
            'Side Effects': ['ржорж╛ржерж╛ржмрзНржпржерж╛, ржмржорж┐', 'ржкрзЗржЯрзЗ ржмрзНржпржерж╛', 'ржорж╛ржерж╛ржмрзНржпржерж╛', 'ржШрзБржо', 'ржмржорж┐'],
            'Dosage': ['500-1000mg', '200-400mg', '20mg', '10mg', '500mg'],
            'Price (рз│)': [5, 8, 15, 12, 20]
        }
        
        df = pd.DataFrame(sample_data)
        df.to_excel('medicine_data.xlsx', index=False)
        print("тЬЕ рж╕рзНржпрж╛ржорзНржкрж▓ Excel ржлрж╛ржЗрж▓ рждрзИрж░рж┐ рж╣ржпрж╝рзЗржЫрзЗ")
        return True
    except Exception as e:
        print(f"тЭМ рж╕рзНржпрж╛ржорзНржкрж▓ ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рждрзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return False

def main():
    """ржорзЗржЗржи ржлрж╛ржВрж╢ржи"""
    print_banner()
    
    # Check Python
    if not check_python():
        input("\nEnter ржЪрж╛ржкрзБржи ржмржирзНржз ржХрж░рждрзЗ...")
        return
    
    # Create virtual environment
    if not create_virtual_environment():
        input("\nEnter ржЪрж╛ржкрзБржи ржмржирзНржз ржХрж░рждрзЗ...")
        return
    
    # Install requirements
    if not install_requirements():
        input("\nEnter ржЪрж╛ржкрзБржи ржмржирзНржз ржХрж░рждрзЗ...")
        return
    
    # Check Excel file
    if not check_excel_file():
        print("\nЁЯТб рж╕рзНржпрж╛ржорзНржкрж▓ Excel ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рждрзЗ ржЪрж╛ржи? (y/n): ", end="")
        choice = input().lower().strip()
        if choice in ['y', 'yes', 'рж╣рзНржпрж╛ржБ']:
            if create_sample_excel():
                print("тЬЕ рж╕рзНржпрж╛ржорзНржкрж▓ ржбрзЗржЯрж╛ ржжрж┐ржпрж╝рзЗ ржЪрзНржпрж╛ржЯржмржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛ ржпрж╛ржмрзЗ")
            else:
                print("тЭМ рж╕рзНржпрж╛ржорзНржкрж▓ ржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рждрзЗ ржкрж╛рж░рзЗржирж┐")
                input("\nEnter ржЪрж╛ржкрзБржи ржмржирзНржз ржХрж░рждрзЗ...")
                return
        else:
            print("тЭМ Excel ржлрж╛ржЗрж▓ ржЫрж╛ржбрж╝рж╛ ржЪрзНржпрж╛ржЯржмржЯ ржЪрж╛рж▓рж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛")
            input("\nEnter ржЪрж╛ржкрзБржи ржмржирзНржз ржХрж░рждрзЗ...")
            return
    
    # Run chatbot
    run_chatbot()

if __name__ == "__main__":
    main()
