#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test expert format with real Excel data structure
"""

import pandas as pd

def format_expert_response(query: str, excel_results, all_source_results):
    """‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶°‡ßá‡¶≠‡ßá‡¶≤‡¶™‡¶æ‡¶∞ Dibedex ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞"""
    try:
        parts = []
        
        if not excel_results and not all_source_results:
            parts.append("‚ùå **‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶è‡¶Æ‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§**\n")
            return "".join(parts)

        # ‡¶Æ‡ßÇ‡¶≤ ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø - ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá
        if excel_results:
            top = excel_results[0]
            
            # Name - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
            name = top.get('Name', 'N/A')
            parts.append(f"**Name:**{name}\n")
            
            # Regular Price - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
            price = top.get('Regular Price', 'N/A')
            parts.append(f"**Regular Price:**{price}\n")
            
            # Company Name - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
            company = top.get('Company Name', 'N/A')
            parts.append(f"**Company Name:**{company}\n")
            
            # Medicine Group - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
            group = top.get('Medicine Group', 'N/A')
            parts.append(f"**Medicine Group:**{group}\n")
            
            # ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
            uses = top.get('‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ', 'N/A')
            # "‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ :" ‡¶Ö‡¶Ç‡¶∂ ‡¶∏‡¶∞‡¶æ‡¶®‡ßã
            if isinstance(uses, str) and '‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ :' in uses:
                uses = uses.replace('‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ :', '').strip()
            parts.append(f"**‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ:**{uses}\n")
            
            # ‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï) - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
            adult_dosage = top.get('‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ( ‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá)', 'nan')
            parts.append(f"**‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá):**{adult_dosage}\n")
            
            # ‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶ï‡¶ø‡¶∂‡ßã‡¶∞) - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ‡¶Æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
            child_dosage = top.get('‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ( ‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶¶‡ßá‡¶∞  ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá)', 'nan')
            parts.append(f"**‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá):**{child_dosage}\n")
            
            # ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø - ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ
            details = top.get('‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ', 'N/A')
            if isinstance(details, str) and '‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ :' in details:
                details = details.replace('‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ :', '').strip()
            parts.append(f"**‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**\n")
            parts.append(f"**‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**{details}\n")

        # ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø
        if all_source_results:
            for i, r in enumerate(all_source_results[:2], 1):
                ctx = r.get('context') or r.get('full_content', '')
                if ctx:
                    cleaned_ctx = ctx.strip()
                    if len(cleaned_ctx) > 300:
                        cleaned_ctx = cleaned_ctx[:300] + "..."
                    
                    if i == 1:
                        parts.append(f"{cleaned_ctx}\n")

        return "".join(parts)
    except Exception as e:
        return f"‚ùå ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡¶æ‡¶∞‡ßç‡¶ü ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}"

def test_with_real_data():
    """Test with actual Excel data"""
    try:
        # Read actual Excel file
        df = pd.read_excel('medicine_data.xlsx')
        
        print("=" * 60)
        print("üß™ Testing with Real Excel Data")
        print("=" * 60)
        
        # Get first medicine data
        if len(df) > 0:
            first_medicine = df.iloc[0].to_dict()
            
            print("üìä First medicine data:")
            for key, value in first_medicine.items():
                print(f"  {key}: {value}")
            print()
            
            # Test expert format
            query = "Dibedex"
            excel_results = [first_medicine]
            all_source_results = [{
                'context': '‡¶∏‡¶ú‡¶®‡ßá ‡¶™‡¶æ‡¶§‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶Ø‡¶æ‡¶∏ ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞‡•§ ‡¶è‡¶ü‡¶ø ‡¶∞‡¶ï‡ßç‡¶§‡ßá ‡¶∂‡¶∞‡ßç‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡¶®‡ßç‡¶§‡ßç‡¶∞‡¶£ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶á‡¶®‡¶∏‡ßÅ‡¶≤‡¶ø‡¶® ‡¶∏‡¶Ç‡¶¨‡ßá‡¶¶‡¶®‡¶∂‡ßÄ‡¶≤‡¶§‡¶æ ‡¶¨‡ßÉ‡¶¶‡ßç‡¶ß‡¶ø ‡¶ï‡¶∞‡ßá‡•§'
            }]
            
            response = format_expert_response(query, excel_results, all_source_results)
            
            print("üìù Expert Format Response:")
            print(response)
            print("=" * 60)
            
            # Check if format matches expected structure
            expected_fields = [
                "**Name:**",
                "**Regular Price:**",
                "**Company Name:**",
                "**Medicine Group:**",
                "**‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ:**",
                "**‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶™‡ßç‡¶∞‡¶æ‡¶™‡ßç‡¶§‡¶¨‡¶Ø‡¶º‡¶∏‡ßç‡¶ï ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá):**",
                "**‡¶ñ‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ (‡¶ï‡¶ø‡¶∂‡ßã‡¶∞‡¶¶‡ßá‡¶∞ ‡¶ï‡ßç‡¶∑‡ßá‡¶§‡ßç‡¶∞‡ßá):**",
                "**‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**",
                "**‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**"
            ]
            
            print("\n‚úÖ Format Verification:")
            for field in expected_fields:
                if field in response:
                    print(f"  ‚úì {field} found")
                else:
                    print(f"  ‚ùå {field} missing")
            
            print("\nüéØ Real data test completed!")
            
        else:
            print("‚ùå No data found in Excel file")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    test_with_real_data()
