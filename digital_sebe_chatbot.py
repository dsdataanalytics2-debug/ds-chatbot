#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üè• DIGITAL SEBE CHATBOT - Advanced Medical AI Assistant
‡¶∏‡¶¨ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶è‡¶¨‡¶Ç WhatsApp Marketing ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶∏‡¶π
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import warnings
import requests
import json
from pathlib import Path
import io
import base64
from datetime import datetime
import plotly.express as px
import plotly.graph_objects as go
from streamlit_option_menu import option_menu
from streamlit_chat import message
import pywhatkit as pwk
import time
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

warnings.filterwarnings('ignore')

# PDF ‡¶è‡¶¨‡¶Ç Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
try:
    import PyPDF2
    import docx
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False
    st.warning("PDF/Word ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø PyPDF2 ‡¶è‡¶¨‡¶Ç python-docx ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®")

# Download required NLTK data
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')

# Page configuration
st.set_page_config(
    page_title="üè• DIGITAL SEBE CHATBOT",
    page_icon="üè•",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for beautiful styling
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 15px;
        margin-bottom: 2rem;
        text-align: center;
        color: white;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
    }
    
    .search-container {
        background: white;
        padding: 2rem;
        border-radius: 20px;
        box-shadow: 0 10px 40px rgba(0,0,0,0.1);
        margin: 2rem 0;
    }
    
    .search-bar {
        border: 2px solid #e0e0e0;
        border-radius: 50px;
        padding: 1rem 2rem;
        font-size: 1.2rem;
        width: 100%;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .search-bar:focus {
        border-color: #667eea;
        box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);
        outline: none;
        transform: translateY(-2px);
    }
    
    /* Google-style search input */
    .stTextInput > div > div > input {
        border: 2px solid #e0e0e0 !important;
        border-radius: 25px !important;
        padding: 12px 20px !important;
        font-size: 16px !important;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1) !important;
        transition: all 0.3s ease !important;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #667eea !important;
        box-shadow: 0 0 20px rgba(102, 126, 234, 0.3) !important;
        transform: translateY(-2px) !important;
    }
    
    /* Google-style search button */
    .stButton > button {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%) !important;
        color: white !important;
        border: none !important;
        border-radius: 25px !important;
        padding: 12px 24px !important;
        font-weight: bold !important;
        font-size: 16px !important;
        transition: all 0.3s ease !important;
        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4) !important;
    }
    
    .stButton > button:hover {
        transform: translateY(-3px) !important;
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6) !important;
    }
    
    .suggestion-chip {
        display: inline-block;
        background: #f0f2f5;
        padding: 0.5rem 1rem;
        margin: 0.5rem;
        border-radius: 25px;
        cursor: pointer;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }
    
    .suggestion-chip:hover {
        background: #667eea;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
    }
    
    .feature-card {
        background: white;
        padding: 1.5rem;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        margin: 1rem 0;
        border-left: 5px solid #667eea;
    }
    
    .chat-container {
        background: white;
        border-radius: 15px;
        padding: 2rem;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        margin: 2rem 0;
    }
    
    .whatsapp-section {
        background: linear-gradient(135deg, #25d366 0%, #128c7e 100%);
        color: white;
        padding: 2rem;
        border-radius: 15px;
        margin: 2rem 0;
    }
    
    .upload-section {
        background: #f8f9fa;
        padding: 2rem;
        border-radius: 15px;
        border: 2px dashed #667eea;
        margin: 2rem 0;
    }
    
    .sidebar .sidebar-content {
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Enhanced suggestion buttons */
    .stButton > button[data-testid="baseButton-secondary"] {
        background: #f8f9fa !important;
        color: #333 !important;
        border: 2px solid #e0e0e0 !important;
        border-radius: 25px !important;
        padding: 10px 20px !important;
        font-weight: 500 !important;
        transition: all 0.3s ease !important;
        margin: 5px !important;
    }
    
    .stButton > button[data-testid="baseButton-secondary"]:hover {
        background: #667eea !important;
        color: white !important;
        border-color: #667eea !important;
        transform: translateY(-2px) !important;
        box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4) !important;
    }
    
    /* Search results styling */
    .search-results {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    
    /* Metrics styling */
    .stMetric {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border: 2px solid #e0e0e0;
    }
</style>
""", unsafe_allow_html=True)

class DigitalSebeChatbot:
    def __init__(self):
        self.data = None
        self.vectorizer = None
        self.tfidf_matrix = None
        self.uploaded_files = []
        self.all_sources = []
        self.chat_history = []
        self.bengali_stop_words = set([
            '‡¶è‡¶¨‡¶Ç', '‡¶Ö‡¶•‡¶¨‡¶æ', '‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ', '‡¶Ø‡¶¶‡¶ø', '‡¶§‡¶¨‡ßá', '‡¶ï‡ßá‡¶®', '‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá', '‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º', '‡¶ï‡¶ñ‡¶®', 
            '‡¶ï‡¶ø', '‡¶ï‡ßã‡¶®', '‡¶ï‡¶æ‡¶¶‡ßá‡¶∞', '‡¶ï‡¶æ‡¶∞', '‡¶ï‡¶æ‡¶ï‡ßá', '‡¶π‡¶Ø‡¶º', '‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', '‡¶π‡¶¨‡ßá', '‡¶ï‡¶∞‡¶§‡ßá', '‡¶ï‡¶∞‡ßá', '‡¶ï‡¶∞‡¶¨‡ßá', 
            '‡¶Ü‡¶õ‡ßá', '‡¶®‡ßá‡¶á', '‡¶•‡¶æ‡¶ï‡¶¨‡ßá', '‡¶è‡¶ü‡¶æ', '‡¶è‡¶ü‡¶ø', '‡¶∏‡ßá‡¶ü‡¶æ', '‡¶∏‡ßá‡¶ü‡¶ø', '‡¶è‡¶á', '‡¶∏‡ßá‡¶á', '‡¶Ø‡ßá', '‡¶Ø‡¶æ', '‡¶Ø‡¶æ‡¶∞', '‡¶Ø‡¶æ‡¶¶‡ßá‡¶∞',
            '‡¶Ü‡¶Æ‡¶ø', '‡¶Ü‡¶Æ‡¶∞‡¶æ', '‡¶§‡ßÅ‡¶Æ‡¶ø', '‡¶§‡ßã‡¶Æ‡¶∞‡¶æ', '‡¶∏‡ßá', '‡¶§‡¶æ‡¶∞‡¶æ', '‡¶Ü‡¶™‡¶®‡¶ø', '‡¶Ü‡¶™‡¶®‡¶æ‡¶∞‡¶æ',
            '‡¶è‡¶ñ‡¶æ‡¶®‡ßá', '‡¶∏‡ßá‡¶ñ‡¶æ‡¶®‡ßá', '‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá', '‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º', '‡¶ï‡ßã‡¶•‡¶æ‡¶ì', '‡¶è‡¶ñ‡¶®', '‡¶§‡¶ñ‡¶®', '‡¶ï‡¶ñ‡¶®', '‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º', '‡¶ï‡¶ñ‡¶®‡¶ì',
            '‡¶≠‡¶æ‡¶≤‡ßã', '‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™', '‡¶¨‡¶°‡¶º', '‡¶õ‡ßã‡¶ü', '‡¶®‡¶§‡ßÅ‡¶®', '‡¶™‡ßÅ‡¶∞‡¶æ‡¶®‡ßã', '‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞', '‡¶ï‡ßÅ‡ßé‡¶∏‡¶ø‡¶§',
            '‡¶∏‡¶π‡¶ú', '‡¶ï‡¶†‡¶ø‡¶®', '‡¶¶‡ßç‡¶∞‡ßÅ‡¶§', '‡¶ß‡ßÄ‡¶∞', '‡¶ó‡¶∞‡¶Æ', '‡¶†‡¶æ‡¶®‡ßç‡¶°‡¶æ', '‡¶â‡¶∑‡ßç‡¶£', '‡¶∂‡ßÄ‡¶§‡¶≤'
        ])
        self.load_data()
        self.preprocess_data()
    
    def load_data(self):
        """Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
        try:
            if os.path.exists('medicine_data.xlsx'):
                # Try different engines for Excel file
                try:
                    # First try openpyxl engine
                    self.data = pd.read_excel('medicine_data.xlsx', engine='openpyxl')
                    st.success(f"‚úÖ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(self.data)} ‡¶ü‡¶ø ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")
                except Exception as e1:
                    try:
                        # Try xlrd engine for older Excel files
                        self.data = pd.read_excel('medicine_data.xlsx', engine='xlrd')
                        st.success(f"‚úÖ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(self.data)} ‡¶ü‡¶ø ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")
                    except Exception as e2:
                        try:
                            # Try odf engine for OpenDocument files
                            self.data = pd.read_excel('medicine_data.xlsx', engine='odf')
                            st.success(f"‚úÖ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(self.data)} ‡¶ü‡¶ø ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")
                        except Exception as e3:
                            # If all engines fail, try reading as CSV
                            try:
                                self.data = pd.read_csv('medicine_data.xlsx', encoding='utf-8')
                                st.success(f"‚úÖ ‡¶°‡ßá‡¶ü‡¶æ CSV ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(self.data)} ‡¶ü‡¶ø ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")
                            except Exception as e4:
                                st.error(f"‚ùå ‡¶∏‡¶¨ engine ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•: {str(e4)}")
                                st.info("üí° ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶™‡ßá‡¶ú‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                                self.data = None
            else:
                st.warning("‚ö†Ô∏è medicine_data.xlsx ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                self.data = None
        except Exception as e:
            st.error(f"‚ùå ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")
            self.data = None
    
    def preprocess_data(self):
        """‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç"""
        if self.data is not None and len(self.data) > 0:
            try:
                # Combine all text columns
                text_columns = []
                for col in self.data.columns:
                    if self.data[col].dtype == 'object':
                        text_columns.append(col)
                
                if text_columns:
                    combined_text = self.data[text_columns].fillna('').astype(str).agg(' '.join, axis=1)
                    
                    # Create TF-IDF vectorizer
                    self.vectorizer = TfidfVectorizer(
                        max_features=1000,
                        stop_words=list(self.bengali_stop_words),
                        ngram_range=(1, 2)
                    )
                    
                    # Fit and transform
                    self.tfidf_matrix = self.vectorizer.fit_transform(combined_text)
                    st.success("‚úÖ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
            except Exception as e:
                st.error(f"‚ùå ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
    
    def search_medicine(self, query, top_k=10):
        """‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® - ‡¶â‡¶®‡ßç‡¶®‡¶§"""
        if self.vectorizer is None or self.tfidf_matrix is None:
            return []
        
        try:
            # Transform query
            query_vector = self.vectorizer.transform([query])
            
            # Calculate similarity
            similarities = cosine_similarity(query_vector, self.tfidf_matrix).flatten()
            
            # Get top matches with higher threshold for single word searches
            if len(query.split()) == 1:  # Single word search
                # Lower threshold for single words to get more comprehensive results
                threshold = 0.05
                top_k = min(15, len(similarities))  # More results for single words
            else:  # Multi-word search
                threshold = 0.1
                top_k = min(top_k, len(similarities))
            
            # Get top matches
            top_indices = similarities.argsort()[-top_k:][::-1]
            
            results = []
            for idx in top_indices:
                if similarities[idx] > threshold:
                    result = {
                        'index': idx,
                        'similarity': similarities[idx],
                        'data': self.data.iloc[idx].to_dict()
                    }
                    results.append(result)
            
            # Sort by similarity
            results.sort(key=lambda x: x['similarity'], reverse=True)
            
            return results
            
        except Exception as e:
            st.error(f"‚ùå ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            return []
    
    def get_comprehensive_info(self, query):
        """‡¶ï‡¶Æ‡¶™‡ßç‡¶∞‡¶ø‡¶π‡ßá‡¶®‡¶∏‡¶ø‡¶≠ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® - Cursor AI ‡¶è‡¶∞ ‡¶Æ‡¶§"""
        try:
            # Search for relevant information
            search_results = self.search_medicine(query)
            
            if not search_results:
                return f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, '{query}' ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§"
            
            # Generate comprehensive response
            response = f"# üîç '{query}' ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø\n\n"
            
            # Add summary
            response += f"**‡¶Æ‡ßã‡¶ü {len(search_results)} ‡¶ü‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§**\n\n"
            
            # Group by category if possible
            categories = {}
            for result in search_results:
                category = result['data'].get('Category', '‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø')
                if category not in categories:
                    categories[category] = []
                categories[category].append(result)
            
            # Show results by category
            for category, results in categories.items():
                response += f"## üìÇ {category}\n\n"
                
                for i, result in enumerate(results):
                    response += f"### üíä {result['data'].get('Medicine Name', '‡¶®‡¶æ‡¶Æ ‡¶®‡ßá‡¶á')}\n"
                    response += f"**‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶®‡¶æ‡¶Æ:** {result['data'].get('Bengali Name', '‡¶®‡¶æ‡¶Æ ‡¶®‡ßá‡¶á')}\n\n"
                    response += f"**‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:** {result['data'].get('Uses', '‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á')}\n\n"
                    response += f"**‡¶™‡¶æ‡¶∞‡ßç‡¶∂‡ßç‡¶¨‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ:** {result['data'].get('Side Effects', '‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á')}\n\n"
                    response += f"**‡¶Æ‡¶æ‡¶§‡ßç‡¶∞‡¶æ:** {result['data'].get('Dosage', '‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á')}\n\n"
                    response += f"**‡¶Æ‡ßÇ‡¶≤‡ßç‡¶Ø:** {result['data'].get('Price (BDT)', '‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡ßá‡¶á')}\n\n"
                    response += f"**‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø ‡¶∏‡ßç‡¶ï‡ßã‡¶∞:** {result['similarity']:.2f}\n\n"
                    response += "---\n\n"
            
            # Add general advice
            response += "## üí° ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂\n\n"
            response += f"'{query}' ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶Ü‡¶∞‡¶ì ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ö‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ AI ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ "
            response += "‡¶è‡¶õ‡¶æ‡¶°‡¶º‡¶æ‡¶ì ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n"
            
            return response
            
        except Exception as e:
            return f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {str(e)}"
    
    def process_file_upload(self, uploaded_file):
        """‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç"""
        try:
            file_type = uploaded_file.type
            file_name = uploaded_file.name
            
            if file_type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                # Excel file - try different engines
                try:
                    # First try openpyxl engine
                    df = pd.read_excel(uploaded_file, engine='openpyxl')
                    st.success(f"‚úÖ Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(df)} ‡¶ü‡¶ø ‡¶∞‡ßã")
                    return df
                except Exception as e1:
                    try:
                        # Try xlrd engine for older Excel files
                        df = pd.read_excel(uploaded_file, engine='xlrd')
                        st.success(f"‚úÖ Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(df)} ‡¶ü‡¶ø ‡¶∞‡ßã")
                        return df
                    except Exception as e2:
                        try:
                            # Try odf engine for OpenDocument files
                            df = pd.read_excel(uploaded_file, engine='odf')
                            st.success(f"‚úÖ Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(df)} ‡¶ü‡¶ø ‡¶∞‡ßã")
                            return df
                        except Exception as e3:
                            st.error(f"‚ùå Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e3)}")
                            st.info("üí° ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
                            return None
            elif file_type == "text/csv":
                # CSV file
                df = pd.read_csv(uploaded_file)
                st.success(f"‚úÖ CSV ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(df)} ‡¶ü‡¶ø ‡¶∞‡ßã")
                return df
            elif file_type == "application/pdf":
                # PDF file
                if PDF_AVAILABLE:
                    pdf_reader = PyPDF2.PdfReader(uploaded_file)
                    text = ""
                    for page in pdf_reader.pages:
                        text += page.extract_text()
                    st.success(f"‚úÖ PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                    return {"type": "pdf", "text": text, "name": file_name}
                else:
                    st.error("‚ùå PDF ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶®‡ßá‡¶á")
                    return None
            elif file_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
                # Word file
                if PDF_AVAILABLE:
                    doc = docx.Document(uploaded_file)
                    text = ""
                    for paragraph in doc.paragraphs:
                        text += paragraph.text + "\n"
                    st.success(f"‚úÖ Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                    return {"type": "docx", "text": text, "name": file_name}
                else:
                    st.error("‚ùå Word ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶®‡ßá‡¶á")
                    return None
            else:
                st.error("‚ùå ‡¶Ö‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶ø‡¶§ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü")
                return None
        except Exception as e:
            st.error(f"‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            return None
    
    def send_whatsapp_message(self, phone_numbers, message):
        """WhatsApp ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã"""
        try:
            success_count = 0
            failed_count = 0
            
            for phone in phone_numbers:
                try:
                    # Format phone number
                    if not phone.startswith('+'):
                        if phone.startswith('0'):
                            phone = '+88' + phone[1:]
                        else:
                            phone = '+88' + phone
                    
                    # Send message using pywhatkit
                    pwk.sendwhatmsg_instantly(
                        phone_no=phone,
                        message=message,
                        wait_time=15,
                        tab_close=True
                    )
                    success_count += 1
                    time.sleep(2)  # Delay between messages
                    
                except Exception as e:
                    failed_count += 1
                    st.error(f"‚ùå {phone} ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            
            return success_count, failed_count
            
        except Exception as e:
            st.error(f"‚ùå WhatsApp ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            return 0, 0

def main():
    # Initialize chatbot
    chatbot = DigitalSebeChatbot()
    
    # Sidebar navigation
    with st.sidebar:
        st.markdown("""
        <div style="text-align: center; padding: 1rem;">
            <h2>üè•</h2>
            <h3>DIGITAL SEBE</h3>
            <p>Advanced Medical AI</p>
        </div>
        """, unsafe_allow_html=True)
        
        selected = option_menu(
            menu_title="‡¶Æ‡ßá‡¶®‡ßÅ",
            options=["üè† ‡¶π‡ßã‡¶Æ", "üîç ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®", "üí¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü", "üì± WhatsApp Marketing", "üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°", "‚ÑπÔ∏è ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø"],
            icons=["house", "search", "chat", "whatsapp", "upload", "info-circle"],
            menu_icon="cast",
            default_index=0,
        )
    
    # Main content area
    if selected == "üè† ‡¶π‡ßã‡¶Æ":
        show_home_page(chatbot)
    elif selected == "üîç ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®":
        show_search_page(chatbot)
    elif selected == "üí¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü":
        show_chat_page(chatbot)
    elif selected == "üì± WhatsApp Marketing":
        show_whatsapp_page(chatbot)
    elif selected == "üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°":
        show_upload_page(chatbot)
    elif selected == "‚ÑπÔ∏è ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø":
        show_help_page()

def show_home_page(chatbot):
    """‡¶π‡ßã‡¶Æ ‡¶™‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã"""
    st.markdown("""
    <div class="main-header">
        <h1>üè• DIGITAL SEBE CHATBOT</h1>
        <p style="font-size: 1.2rem; margin-top: 1rem;">‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ø‡¶∂‡ßç‡¶¨‡¶∏‡ßç‡¶§ ‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ AI ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ</p>
        <p style="font-size: 1rem; margin-top: 0.5rem;">‡¶∏‡¶¨ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡ßá‡¶§‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Enhanced Google-style Search Bar
    st.markdown("""
    <div class="search-container">
        <div style="text-align: center; margin-bottom: 2rem;">
            <h2 style="color: #333; font-size: 2rem; margin-bottom: 1rem;">üîç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</h2>
            <p style="color: #666; font-size: 1.1rem;">Google ‡¶è‡¶∞ ‡¶Æ‡¶§ ‡¶∏‡¶π‡¶ú‡ßá ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Centered search input with Google-like styling
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        search_query = st.text_input(
            "üîç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶¨‡¶æ ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®...",
            placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏, ‡¶π‡ßÉ‡¶¶‡¶∞‡ßã‡¶ó, ‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø",
            key="home_search",
            label_visibility="collapsed"
        )
        
        # Search button
        if st.button("üîç ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", type="primary", use_container_width=True):
            if search_query:
                st.session_state.search_query = search_query
                st.rerun()
    
    # Show search results at the top if query exists
    if search_query or st.session_state.get('search_query'):
        query = search_query or st.session_state.get('search_query')
        if query:
            st.markdown("---")
            st.markdown(f"### üîç '{query}' ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶´‡¶≤‡¶æ‡¶´‡¶≤")
            
            # Use comprehensive search for better results
            if len(query.split()) == 1:  # Single word search
                # Show comprehensive information
                comprehensive_info = chatbot.get_comprehensive_info(query)
                st.markdown(comprehensive_info)
                
                # Also show detailed results
                results = chatbot.search_medicine(query)
                if results:
                    st.success(f"‚úÖ {len(results)} ‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
                    
                    # Display results in a better format
                    for i, result in enumerate(results):
                        with st.expander(f"üìã ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ {i+1} - ‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø: {result['similarity']:.2f}", expanded=False):
                            col1, col2 = st.columns([1, 3])
                            with col1:
                                st.metric("‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø", f"{result['similarity']:.2f}")
                            with col2:
                                for key, value in result['data'].items():
                                    if key != 'index':
                                        st.write(f"**{key}:** {value}")
            else:  # Multi-word search
                results = chatbot.search_medicine(query)
                if results:
                    st.success(f"‚úÖ {len(results)} ‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
                    
                    # Display results in a better format
                    for i, result in enumerate(results):
                        with st.expander(f"üìã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ {i+1} - ‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø: {result['similarity']:.2f}", expanded=True):
                            col1, col2 = st.columns([1, 3])
                            with col1:
                                st.metric("‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø", f"{result['similarity']:.2f}")
                            with col2:
                                for key, value in result['data'].items():
                                    if key != 'index':
                                        st.write(f"**{key}:** {value}")
                else:
                    st.info("‚ÑπÔ∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
    
    # Enhanced Search Suggestions
    st.markdown("""
    <div class="feature-card">
        <h3>üîç ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®</h3>
        <p>‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá ‡¶ú‡¶æ‡¶®‡¶§‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®:</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Better organized suggestions
    suggestions = [
        "‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏", "‡¶π‡ßÉ‡¶¶‡¶∞‡ßã‡¶ó", "‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ", "‡¶ï‡¶ø‡¶°‡¶®‡¶ø‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ",
        "‡¶ó‡ßç‡¶Ø‡¶æ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶ï", "‡¶Ø‡ßå‡¶® ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶ì ‡¶ü‡ßá‡¶∏‡ßç‡¶ü‡ßã‡¶∏‡ßç‡¶ü‡ßá‡¶∞‡¶®", "‡¶π‡¶æ‡¶Å‡¶™‡¶æ‡¶®‡¶ø", "‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡¶æ‡¶∞"
    ]
    
    # Create a more organized grid
    cols = st.columns(4)
    for i, suggestion in enumerate(suggestions):
        col_idx = i % 4
        with cols[col_idx]:
            if st.button(f"üîç {suggestion}", key=f"sugg_{i}", use_container_width=True):
                st.session_state.home_search = suggestion
                st.rerun()
    
    # How it works section with better styling
    st.markdown("""
    <div class="feature-card">
        <h3>ü§ñ ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá</h3>
        <div style="padding: 1rem; background: #f8f9fa; border-radius: 10px;">
            <ul style="list-style: none; padding: 0;">
                <li style="margin: 0.5rem 0; padding: 0.5rem; background: white; border-radius: 8px; border-left: 4px solid #667eea;">
                    <strong>üîç ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®:</strong> ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá
                </li>
                <li style="margin: 0.5rem 0; padding: 0.5rem; background: white; border-radius: 8px; border-left: 4px solid #667eea;">
                    <strong>üíä ‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏:</strong> ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶π‡¶æ‡¶ú‡¶æ‡¶∞ ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶è‡¶¨‡¶Ç ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø
                </li>
                <li style="margin: 0.5rem 0; padding: 0.5rem; background: white; border-radius: 8px; border-left: 4px solid #667eea;">
                    <strong>üì± WhatsApp Marketing:</strong> ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
                </li>
                <li style="margin: 0.5rem 0; padding: 0.5rem; background: white; border-radius: 8px; border-left: 4px solid #667eea;">
                    <strong>üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°:</strong> Excel, PDF, Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßá ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ
                </li>
                <li style="margin: 0.5rem 0; padding: 0.5rem; background: white; border-radius: 8px; border-left: 4px solid #667eea;">
                    <strong>üí¨ AI ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü:</strong> ChatGPT ‡¶è‡¶∞ ‡¶Æ‡¶§ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶® ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®
                </li>
            </ul>
        </div>
    </div>
    """, unsafe_allow_html=True)

def show_search_page(chatbot):
    """‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶™‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã"""
    st.markdown("""
    <div class="main-header">
        <h2>üîç ‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®</h2>
        <p>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Advanced search
    col1, col2 = st.columns([3, 1])
    
    with col1:
        search_query = st.text_input(
            "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®...",
            placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏‡ßá‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£, ‡¶π‡ßÉ‡¶¶‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ, ‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®",
            key="search_page_query"
        )
    
    with col2:
        search_type = st.selectbox(
            "‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶®‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®",
            ["‡¶∏‡¶¨", "‡¶≤‡¶ï‡ßç‡¶∑‡¶£", "‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ", "‡¶ì‡¶∑‡ßÅ‡¶ß", "‡¶ñ‡¶æ‡¶¶‡ßç‡¶Ø‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ"]
        )
    
    if search_query:
        results = chatbot.search_medicine(search_query)
        if results:
            st.success(f"‚úÖ '{search_query}' ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø {len(results)} ‡¶ü‡¶ø ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
            
            # Display results in tabs
            tab1, tab2 = st.tabs(["üìã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤", "üìä ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£"])
            
            with tab1:
                for i, result in enumerate(results):
                    with st.expander(f"‡¶´‡¶≤‡¶æ‡¶´‡¶≤ {i+1} - ‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø: {result['similarity']:.2f}"):
                        for key, value in result['data'].items():
                            st.write(f"**{key}:** {value}")
            
            with tab2:
                if len(results) > 1:
                    # Similarity chart
                    similarities = [r['similarity'] for r in results]
                    labels = [f"‡¶´‡¶≤‡¶æ‡¶´‡¶≤ {i+1}" for i in range(len(results))]
                    
                    fig = px.bar(
                        x=labels,
                        y=similarities,
                        title="‡¶´‡¶≤‡¶æ‡¶´‡¶≤‡ßá‡¶∞ ‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø ‡¶∏‡ßç‡¶ï‡ßã‡¶∞",
                        labels={"x": "‡¶´‡¶≤‡¶æ‡¶´‡¶≤", "y": "‡¶∏‡¶æ‡¶¶‡ßÉ‡¶∂‡ßç‡¶Ø ‡¶∏‡ßç‡¶ï‡ßã‡¶∞"}
                    )
                    st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("‚ÑπÔ∏è ‡¶ï‡ßã‡¶®‡ßã ‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

def show_chat_page(chatbot):
    """‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶™‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã"""
    st.markdown("""
    <div class="main-header">
        <h2>üí¨ AI ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü</h2>
        <p>ChatGPT ‡¶è‡¶∞ ‡¶Æ‡¶§ ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶æ‡¶® ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Initialize chat history
    if "messages" not in st.session_state:
        st.session_state.messages = []
    
    # Chat input
    user_input = st.chat_input("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®...")
    
    if user_input:
        # Add user message
        st.session_state.messages.append({"role": "user", "content": user_input})
        
        # Generate AI response
        ai_response = generate_ai_response(user_input, chatbot)
        st.session_state.messages.append({"role": "assistant", "content": ai_response})
    
    # Display chat history
    for message in st.session_state.messages:
        with st.chat_message(message["role"]):
            st.write(message["content"])
    
    # Clear chat button
    if st.button("üóëÔ∏è ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®"):
        st.session_state.messages = []
        st.rerun()

def generate_ai_response(user_input, chatbot):
    """AI ‡¶∞‡ßá‡¶∏‡¶™‡¶®‡ßç‡¶∏ ‡¶ú‡ßá‡¶®‡¶æ‡¶∞‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ - Cursor AI ‡¶è‡¶∞ ‡¶Æ‡¶§ ‡¶â‡¶®‡ßç‡¶®‡¶§"""
    try:
        # Check if it's a medical question
        medical_keywords = ['‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏', '‡¶π‡ßÉ‡¶¶‡¶∞‡ßã‡¶ó', '‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞', '‡¶ï‡¶ø‡¶°‡¶®‡¶ø', '‡¶ó‡ßç‡¶Ø‡¶æ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶ï', '‡¶π‡¶æ‡¶Å‡¶™‡¶æ‡¶®‡¶ø', '‡¶ï‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶∏‡¶æ‡¶∞', 
                           '‡¶ì‡¶∑‡ßÅ‡¶ß', '‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ', '‡¶≤‡¶ï‡ßç‡¶∑‡¶£', '‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ï‡¶æ‡¶∞', '‡¶ñ‡¶æ‡¶¨‡¶æ‡¶∞', '‡¶°‡¶æ‡¶Ø‡¶º‡ßá‡¶ü', '‡¶¨‡ßç‡¶Ø‡¶æ‡¶Ø‡¶º‡¶æ‡¶Æ']
        
        is_medical = any(keyword in user_input for keyword in medical_keywords)
        
        if is_medical:
            # Use comprehensive search for medical questions
            comprehensive_info = chatbot.get_comprehensive_info(user_input)
            return comprehensive_info
        else:
            # For general questions, provide helpful response
            response = f"# üí¨ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: {user_input}\n\n"
            response += "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡¶ü‡¶ø ‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶®‡¶Ø‡¶º‡•§ "
            response += "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ AI ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ, ‡¶§‡¶æ‡¶á ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§\n\n"
            response += "## üí° ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®:\n"
            response += "- ‡¶°‡¶æ‡¶Ø‡¶º‡¶æ‡¶¨‡ßá‡¶ü‡¶ø‡¶∏‡ßá‡¶∞ ‡¶≤‡¶ï‡ßç‡¶∑‡¶£ ‡¶ï‡ßÄ?\n"
            response += "- ‡¶π‡ßÉ‡¶¶‡¶∞‡ßã‡¶ó‡ßá‡¶∞ ‡¶ö‡¶ø‡¶ï‡¶ø‡ßé‡¶∏‡¶æ ‡¶ï‡ßÄ?\n"
            response += "- ‡¶≤‡¶ø‡¶≠‡¶æ‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßÄ ‡¶ñ‡¶æ‡¶¨‡ßá‡¶®?\n"
            response += "- ‡¶ó‡ßç‡¶Ø‡¶æ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßá‡¶∞ ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ï‡ßÄ?\n\n"
            response += "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶æ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®!"
            
            return response
        
    except Exception as e:
        return f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {str(e)}"

def show_whatsapp_page(chatbot):
    """WhatsApp Marketing ‡¶™‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã"""
    st.markdown("""
    <div class="whatsapp-section">
        <h2>üì± WhatsApp Marketing</h2>
        <p>‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá ‡¶Ö‡¶®‡ßá‡¶ï ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®</p>
    </div>
    """, unsafe_allow_html=True)
    
    # File upload for phone numbers
    st.markdown("""
    <div class="upload-section">
        <h3>üìû ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</h3>
        <p>Excel ‡¶¨‡¶æ CSV ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®</p>
    </div>
    """, unsafe_allow_html=True)
    
    phone_file = st.file_uploader(
        "‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®",
        type=['xlsx', 'csv'],
        key="phone_file"
    )
    
    phone_numbers = []
    if phone_file:
        try:
            if phone_file.type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet":
                # Excel file - try different engines
                try:
                    df = pd.read_excel(phone_file, engine='openpyxl')
                except Exception as e1:
                    try:
                        df = pd.read_excel(phone_file, engine='xlrd')
                    except Exception as e2:
                        try:
                            df = pd.read_excel(phone_file, engine='odf')
                        except Exception as e3:
                            st.error(f"‚ùå Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e3)}")
                            return
            else:
                df = pd.read_csv(phone_file)
            
            # Display phone numbers
            st.success(f"‚úÖ {len(df)} ‡¶ü‡¶ø ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
            st.dataframe(df.head(10))
            
            # Extract phone numbers
            for col in df.columns:
                if 'phone' in col.lower() or 'mobile' in col.lower() or 'number' in col.lower():
                    phone_numbers = df[col].dropna().astype(str).tolist()
                    break
            
            if not phone_numbers:
                # Try first column if no phone column found
                phone_numbers = df.iloc[:, 0].dropna().astype(str).tolist()
            
        except Exception as e:
            st.error(f"‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
    
    # Message input
    message_text = st.text_area(
        "‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
        placeholder="‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®...",
        height=150
    )
    
    # Send button
    if st.button("üì§ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®", disabled=not phone_numbers or not message_text):
        if phone_numbers and message_text:
            with st.spinner("‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                success, failed = chatbot.send_whatsapp_message(phone_numbers, message_text)
                
                if success > 0:
                    st.success(f"‚úÖ {success} ‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                if failed > 0:
                    st.warning(f"‚ö†Ô∏è {failed} ‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
        else:
            st.warning("‚ö†Ô∏è ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶â‡¶≠‡¶Ø‡¶º‡¶á ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®")

def show_upload_page(chatbot):
    """‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶™‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã"""
    st.markdown("""
    <div class="main-header">
        <h2>üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°</h2>
        <p>‡¶®‡¶§‡ßÅ‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Create tabs for different upload types
    tab1, tab2, tab3 = st.tabs(["üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤", "üîë API ‡¶ï‡ßÄ", "üìö ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü"])
    
    with tab1:
        st.markdown("""
        <div class="upload-section">
            <h3>üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</h3>
            <p>‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ, ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø Excel/CSV ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</p>
        </div>
        """, unsafe_allow_html=True)
        
        data_files = st.file_uploader(
            "‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            type=['xlsx', 'csv'],
            accept_multiple_files=True,
            key="data_files"
        )
        
        if data_files:
            st.success(f"‚úÖ {len(data_files)} ‡¶ü‡¶ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
            
            for uploaded_file in data_files:
                st.write(f"üìÅ {uploaded_file.name}")
                
                # Process file
                result = chatbot.process_file_upload(uploaded_file)
                
                if result is not None:
                    if isinstance(result, pd.DataFrame):
                        st.dataframe(result.head())
                        st.info(f"üìä ‡¶Æ‡ßã‡¶ü {len(result)} ‡¶ü‡¶ø ‡¶∞‡ßã ‡¶è‡¶¨‡¶Ç {len(result.columns)} ‡¶ü‡¶ø ‡¶ï‡¶≤‡¶æ‡¶Æ")
                    elif isinstance(result, dict):
                        st.write(f"**‡¶´‡¶æ‡¶á‡¶≤ ‡¶ß‡¶∞‡¶®:** {result['type']}")
                        st.write(f"**‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ:** {result['name']}")
    
    with tab2:
        st.markdown("""
        <div class="upload-section">
            <h3>üîë API ‡¶ï‡ßÄ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</h3>
            <p>WhatsApp API, OpenAI API ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø ‡¶ï‡ßÄ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</p>
        </div>
        """, unsafe_allow_html=True)
        
        # API Key upload
        api_key_file = st.file_uploader(
            "API ‡¶ï‡ßÄ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            type=['txt', 'env', 'json', 'yaml', 'yml'],
            key="api_key_file"
        )
        
        if api_key_file:
            st.success(f"‚úÖ API ‡¶ï‡ßÄ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {api_key_file.name}")
            
            # Read and display API key content (masked)
            try:
                content = api_key_file.read().decode('utf-8')
                
                # Mask sensitive information
                masked_content = content
                if 'API_KEY' in content or 'api_key' in content:
                    masked_content = re.sub(r'(API_KEY|api_key)\s*[:=]\s*([^\s\n]+)', r'\1: ********', masked_content)
                if 'SECRET' in content or 'secret' in content:
                    masked_content = re.sub(r'(SECRET|secret)\s*[:=]\s*([^\s\n]+)', r'\1: ********', masked_content)
                
                st.text_area("API ‡¶ï‡ßÄ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ (‡¶Æ‡¶æ‡¶∏‡ßç‡¶ï ‡¶ï‡¶∞‡¶æ)", masked_content, height=200)
                
                # Save API key to .env file
                if st.button("üíæ .env ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®"):
                    try:
                        with open('.env', 'w', encoding='utf-8') as f:
                            f.write(content)
                        st.success("‚úÖ API ‡¶ï‡ßÄ .env ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                    except Exception as e:
                        st.error(f"‚ùå .env ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
                        
            except Exception as e:
                st.error(f"‚ùå API ‡¶ï‡ßÄ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶°‡¶º‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
        
        # Manual API key input
        st.markdown("---")
        st.markdown("### üîë ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßÅ‡¶Ø‡¶º‡¶æ‡¶≤ API ‡¶ï‡ßÄ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü")
        
        col1, col2 = st.columns(2)
        with col1:
            api_name = st.text_input("API ‡¶®‡¶æ‡¶Æ", placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: OpenAI, WhatsApp")
        with col2:
            api_key = st.text_input("API ‡¶ï‡ßÄ", placeholder="sk-...", type="password")
        
        if st.button("üíæ API ‡¶ï‡ßÄ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®", disabled=not api_name or not api_key):
            try:
                # Append to .env file
                with open('.env', 'a', encoding='utf-8') as f:
                    f.write(f"\n{api_name.upper()}_API_KEY={api_key}")
                st.success(f"‚úÖ {api_name} API ‡¶ï‡ßÄ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡ßá‡¶≠ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
            except Exception as e:
                st.error(f"‚ùå API ‡¶ï‡ßÄ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
    
    with tab3:
        st.markdown("""
        <div class="upload-section">
            <h3>üìö ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</h3>
            <p>‡¶Æ‡ßá‡¶°‡¶ø‡¶ï‡ßá‡¶≤ ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü, ‡¶ó‡¶¨‡ßá‡¶∑‡¶£‡¶æ ‡¶™‡¶§‡ßç‡¶∞ ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø PDF/Word ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</p>
        </div>
        """, unsafe_allow_html=True)
        
        doc_files = st.file_uploader(
            "‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®",
            type=['pdf', 'docx'],
            accept_multiple_files=True,
            key="doc_files"
        )
        
        if doc_files:
            st.success(f"‚úÖ {len(doc_files)} ‡¶ü‡¶ø ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
            
            for uploaded_file in doc_files:
                st.write(f"üìÅ {uploaded_file.name}")
                
                # Process file
                result = chatbot.process_file_upload(uploaded_file)
                
                if result is not None:
                    if isinstance(result, dict):
                        st.write(f"**‡¶´‡¶æ‡¶á‡¶≤ ‡¶ß‡¶∞‡¶®:** {result['type']}")
                        st.write(f"**‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶æ‡¶Æ:** {result['name']}")
                        if 'text' in result:
                            with st.expander("üìñ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"):
                                st.text(result['text'][:1000] + "..." if len(result['text']) > 1000 else result['text'])
    
    # Show uploaded files summary
    if st.session_state.get('upload_files') or st.session_state.get('data_files') or st.session_state.get('doc_files'):
        st.markdown("---")
        st.markdown("### üìã ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ")
        
        all_files = []
        if st.session_state.get('data_files'):
            all_files.extend(st.session_state.get('data_files', []))
        if st.session_state.get('doc_files'):
            all_files.extend(st.session_state.get('doc_files', []))
        
        if all_files:
            for i, file in enumerate(all_files):
                col1, col2, col3 = st.columns([3, 2, 1])
                with col1:
                    st.write(f"üìÅ {file.name}")
                with col2:
                    st.write(f"üìè {file.size} bytes")
                with col3:
                    if st.button(f"üóëÔ∏è ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key=f"del_{i}"):
                        # Remove file from session state
                        if file in st.session_state.get('data_files', []):
                            st.session_state.data_files.remove(file)
                        if file in st.session_state.get('doc_files', []):
                            st.session_state.doc_files.remove(file)
                        st.rerun()

def show_help_page():
    """‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶™‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã"""
    st.markdown("""
    <div class="main-header">
        <h2>‚ÑπÔ∏è ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø</h2>
        <p>DIGITAL SEBE CHATBOT ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶ø‡¶ï‡¶æ</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="feature-card">
        <h3>üîç ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶¨‡ßá‡¶®</h3>
        <ol>
            <li>‡¶π‡ßã‡¶Æ ‡¶™‡ßá‡¶ú‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶¨‡¶æ‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®</li>
            <li>‡¶Ö‡¶•‡¶¨‡¶æ ‡¶ú‡¶®‡¶™‡ßç‡¶∞‡¶ø‡¶Ø‡¶º ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®</li>
            <li>‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡¶ø‡¶§ ‡¶∏‡¶¨ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶¨‡ßá‡¶®</li>
        </ol>
    </div>
    
    <div class="feature-card">
        <h3>üí¨ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶¨‡ßá‡¶®</h3>
        <ol>
            <li>‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶™‡ßá‡¶ú‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®</li>
            <li>AI ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶¨‡ßá</li>
            <li>‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶∏‡¶Ç‡¶∞‡¶ï‡ßç‡¶∑‡¶ø‡¶§ ‡¶•‡¶æ‡¶ï‡¶¨‡ßá</li>
        </ol>
    </div>
    
    <div class="feature-card">
        <h3>üì± WhatsApp Marketing ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶¨‡ßá‡¶®</h3>
        <ol>
            <li>Excel ‡¶¨‡¶æ CSV ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ó‡ßÅ‡¶≤‡ßã ‡¶∞‡¶æ‡¶ñ‡ßÅ‡¶®</li>
            <li>‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</li>
            <li>‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®</li>
            <li>‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶® ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®</li>
        </ol>
    </div>
    
    <div class="feature-card">
        <h3>üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶∞‡¶¨‡ßá‡¶®</h3>
        <ol>
            <li>‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶™‡ßá‡¶ú‡ßá ‡¶Ø‡¶æ‡¶®</li>
            <li>‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶ø‡¶§ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®</li>
            <li>‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®</li>
            <li>‡¶´‡¶æ‡¶á‡¶≤‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶¨‡¶∏‡ßç‡¶§‡ßÅ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®</li>
        </ol>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
