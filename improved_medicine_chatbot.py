#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üíä ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü - ‡¶Ö‡¶∞‡¶ó‡¶æ‡¶®‡¶æ‡¶á‡¶ú‡¶° ‡¶è‡¶¨‡¶Ç ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶´‡ßç‡¶∞‡ßá‡¶®‡ßç‡¶°‡¶≤‡¶ø ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶®
Modern ‡¶è‡¶¨‡¶Ç Responsive Frontend Design
"""

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import warnings
import requests
import json
from pathlib import Path
import io
import base64
from datetime import datetime
warnings.filterwarnings('ignore')

# PDF ‡¶è‡¶¨‡¶Ç Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏‡¶ø‡¶Ç ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
try:
    import PyPDF2
    import docx
    PDF_AVAILABLE = True
except ImportError:
    PDF_AVAILABLE = False

# Download required NLTK data
try:
    nltk.data.find('tokenizers/punkt')
except LookupError:
    nltk.download('punkt')

try:
    nltk.data.find('corpora/stopwords')
except LookupError:
    nltk.download('stopwords')

class ImprovedMedicineChatbot:
    def __init__(self, excel_file):
        self.excel_file = excel_file
        self.data = None
        self.vectorizer = None
        self.tfidf_matrix = None
        self.pdf_data = []
        self.word_data = []
        self.excel_data = []
        self.api_data = []
        self.all_sources = []
        self.bengali_stop_words = set([
            '‡¶è‡¶¨‡¶Ç', '‡¶Ö‡¶•‡¶¨‡¶æ', '‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ', '‡¶Ø‡¶¶‡¶ø', '‡¶§‡¶¨‡ßá', '‡¶ï‡ßá‡¶®', '‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá', '‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º', '‡¶ï‡¶ñ‡¶®', 
            '‡¶ï‡¶ø', '‡¶ï‡ßã‡¶®', '‡¶ï‡¶æ‡¶¶‡ßá‡¶∞', '‡¶ï‡¶æ‡¶∞', '‡¶ï‡¶æ‡¶ï‡ßá', '‡¶π‡¶Ø‡¶º', '‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', '‡¶π‡¶¨‡ßá', '‡¶ï‡¶∞‡¶§‡ßá', '‡¶ï‡¶∞‡ßá', 
            '‡¶ï‡¶∞‡¶¨‡ßá', '‡¶Ü‡¶õ‡ßá', '‡¶®‡ßá‡¶á', '‡¶•‡¶æ‡¶ï‡¶¨‡ßá', '‡¶è‡¶ü‡¶æ', '‡¶è‡¶ü‡¶ø', '‡¶∏‡ßá‡¶ü‡¶æ', '‡¶∏‡ßá‡¶ü‡¶ø', '‡¶è‡¶á', '‡¶∏‡ßá‡¶á'
        ])
        self.load_data()
        self.preprocess_data()

    def save_uploaded_file_to_data_source(self, uploaded_file):
        """UploadedFile ‡¶°‡¶ø‡¶∏‡ßç‡¶ï‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶®"""
        try:
            data_dir = Path("data source")
            data_dir.mkdir(parents=True, exist_ok=True)
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            safe_name = uploaded_file.name
            dest_path = data_dir / f"{timestamp}_{safe_name}"
            
            try:
                bytes_data = uploaded_file.getbuffer()
                with open(dest_path, "wb") as f:
                    f.write(bytes_data)
            except Exception:
                content = uploaded_file.read()
                with open(dest_path, "wb") as f:
                    f.write(content)
                try:
                    uploaded_file.seek(0)
                except Exception:
                    pass
            return str(dest_path)
        except Exception as e:
            st.warning(f"‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
            return ""

    def load_data(self):
        """Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
        try:
            self.data = pd.read_excel(self.excel_file)
            return True
        except Exception as e:
            st.error(f"‚ùå ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {str(e)}")
            return False

    def add_pdf_file(self, pdf_file):
        """PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"""
        if not PDF_AVAILABLE:
            st.error("‚ùå PDF ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶®‡ßá‡¶á‡•§ PyPDF2 ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return False
            
        try:
            saved_path = self.save_uploaded_file_to_data_source(pdf_file)
            pdf_reader = PyPDF2.PdfReader(pdf_file)
            text_content = ""
            
            for page_num in range(len(pdf_reader.pages)):
                page = pdf_reader.pages[page_num]
                text_content += page.extract_text() + "\n"
            
            if text_content.strip():
                self.pdf_data.append({
                    'filename': pdf_file.name,
                    'content': text_content,
                    'source': 'PDF',
                    'upload_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'saved_path': saved_path
                })
                return True
            else:
                st.warning("‚ö†Ô∏è PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                return False
                
        except Exception as e:
            st.error(f"‚ùå PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            return False

    def add_word_file(self, word_file):
        """Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®"""
        if not PDF_AVAILABLE:
            st.error("‚ùå Word ‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶® ‡¶®‡ßá‡¶á‡•§ python-docx ‡¶á‡¶®‡¶∏‡ßç‡¶ü‡¶≤ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
            return False
            
        try:
            saved_path = self.save_uploaded_file_to_data_source(word_file)
            doc = docx.Document(word_file)
            text_content = ""
            
            for paragraph in doc.paragraphs:
                text_content += paragraph.text + "\n"
            
            if text_content.strip():
                self.word_data.append({
                    'filename': word_file.name,
                    'content': text_content,
                    'source': 'Word',
                    'upload_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'saved_path': saved_path
                })
                return True
            else:
                st.warning("‚ö†Ô∏è Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßã‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            return False

    def add_excel_file(self, excel_file):
        """Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"""
        try:
            saved_path = self.save_uploaded_file_to_data_source(excel_file)
            df = pd.read_excel(excel_file)
            
            if len(df) > 0:
                text_content = ""
                for idx, row in df.iterrows():
                    row_text = " ".join([str(val) for val in row.values if pd.notna(val)])
                    text_content += row_text + "\n"
                
                self.excel_data.append({
                    'filename': excel_file.name,
                    'content': text_content,
                    'dataframe': df,
                    'source': 'Excel',
                    'upload_time': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'saved_path': saved_path
                })
                return True
            else:
                st.warning("‚ö†Ô∏è Excel ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶ï‡ßã‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶®‡ßá‡¶á")
                return False
                
        except Exception as e:
            st.error(f"‚ùå Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            return False

    def clean_text(self, text):
        """‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶™‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®"""
        text = text.lower()
        text = re.sub(r'[^\w\s\u0980-\u09FF]', ' ', text)
        text = re.sub(r'\s+', ' ', text).strip()
        words = text.split()
        filtered_words = [word for word in words if word not in self.bengali_stop_words]
        return ' '.join(filtered_words)

    def preprocess_data(self):
        """‡¶∏‡¶æ‡¶∞‡ßç‡¶ö‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®"""
        if self.data is None:
            return
            
        text_columns = []
        for col in self.data.columns:
            if self.data[col].dtype == 'object':
                text_columns.append(col)
        
        self.data['combined_text'] = self.data[text_columns].fillna('').astype(str).agg(' '.join, axis=1)
        self.data['cleaned_text'] = self.data['combined_text'].apply(self.clean_text)
        
        self.vectorizer = TfidfVectorizer(
            max_features=2000,
            ngram_range=(1, 3),
            min_df=1,
            stop_words=None
        )
        
        self.tfidf_matrix = self.vectorizer.fit_transform(self.data['cleaned_text'])

    def search_medicines(self, query, top_k=5):
        """‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶§‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®"""
        if self.data is None or self.vectorizer is None:
            return []
        
        cleaned_query = self.clean_text(query)
        query_vector = self.vectorizer.transform([cleaned_query])
        similarities = cosine_similarity(query_vector, self.tfidf_matrix).flatten()
        top_indices = similarities.argsort()[-top_k:][::-1]
        
        results = []
        for idx in top_indices:
            if similarities[idx] > 0.05:
                medicine_info = self.data.iloc[idx].to_dict()
                medicine_info['similarity_score'] = similarities[idx]
                results.append(medicine_info)
        
        return results

def create_sidebar():
    """Improved sidebar with better organization"""
    with st.sidebar:
        # Logo and branding
        st.markdown("""
        <div style="text-align: center; padding: 1rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; margin-bottom: 2rem;">
            <h2 style="color: white; margin: 0;">üíä ‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü</h2>
            <p style="color: white; margin: 0; font-size: 0.9rem;">AI-Powered Medicine Assistant</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Navigation menu
        st.markdown("### üß≠ ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶∂‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ")
        page = st.selectbox(
            "‡¶™‡ßá‡¶ú ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
            ["üè† ‡¶π‡ßã‡¶Æ", "üîç ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", "üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°", "üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", "‚ÑπÔ∏è ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø"]
        )
        
        # Quick stats
        if 'chatbot' in st.session_state and st.session_state.chatbot.data is not None:
            st.markdown("### üìä ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®")
            col1, col2 = st.columns(2)
            with col1:
                st.metric("‡¶Æ‡ßã‡¶ü ‡¶ì‡¶∑‡ßÅ‡¶ß", len(st.session_state.chatbot.data))
            with col2:
                st.metric("‡¶ï‡¶≤‡¶æ‡¶Æ", len(st.session_state.chatbot.data.columns))
        
        # Quick search
        st.markdown("### ‚ö° ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶ñ‡ßã‡¶Å‡¶ú")
        quick_search = st.text_input("‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ:", placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: Paracetamol", key="quick_search")
        if st.button("üîç ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", key="quick_search_btn") and quick_search:
            st.session_state.quick_search_result = quick_search
        
        # File management
        st.markdown("### üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü")
        uploaded_files_count = 0
        if 'chatbot' in st.session_state:
            chatbot = st.session_state.chatbot
            uploaded_files_count = (len(chatbot.pdf_data) + len(chatbot.word_data) + 
                                  len(chatbot.excel_data) + len(chatbot.api_data))
        
        st.info(f"üìÅ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶´‡¶æ‡¶á‡¶≤: {uploaded_files_count}")
        
        if st.button("üóëÔ∏è ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key="clear_all_files"):
            if 'chatbot' in st.session_state:
                chatbot = st.session_state.chatbot
                chatbot.pdf_data = []
                chatbot.word_data = []
                chatbot.excel_data = []
                chatbot.api_data = []
                st.success("‚úÖ ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
        
        return page

def create_main_interface():
    """Modern main interface with card-based layout"""
    st.markdown("""
    <div style="text-align: center; margin-bottom: 3rem;">
        <h1 style="font-size: 3rem; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                   -webkit-background-clip: text; -webkit-text-fill-color: transparent; 
                   background-clip: text; margin-bottom: 1rem;">
            üíä ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü
        </h1>
        <p style="font-size: 1.2rem; color: #666; margin-bottom: 2rem;">
            ‡¶¨‡ßÅ‡¶¶‡ßç‡¶ß‡¶ø‡¶Æ‡¶§‡ßç‡¶§‡¶æ ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® AI ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶®‡¶ø‡¶®
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    # Feature cards
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div style="background: white; padding: 2rem; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); 
                    text-align: center; border-left: 5px solid #667eea;">
            <h3 style="color: #667eea;">üîç</h3>
            <h4>‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö</h4>
            <p>‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ì ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶â‡¶≠‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style="background: white; padding: 2rem; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); 
                    text-align: center; border-left: 5px solid #764ba2;">
            <h3 style="color: #764ba2;">üìÅ</h3>
            <h4>‡¶Æ‡¶æ‡¶≤‡ßç‡¶ü‡¶ø ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü</h4>
            <p>PDF, Word, Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div style="background: white; padding: 2rem; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); 
                    text-align: center; border-left: 5px solid #2ecc71;">
            <h3 style="color: #2ecc71;">ü§ñ</h3>
            <h4>AI ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°</h4>
            <p>‡¶Æ‡ßá‡¶∂‡¶ø‡¶® ‡¶≤‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶≤‡¶æ‡¶´‡¶≤</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div style="background: white; padding: 2rem; border-radius: 15px; box-shadow: 0 4px 15px rgba(0,0,0,0.1); 
                    text-align: center; border-left: 5px solid #e74c3c;">
            <h3 style="color: #e74c3c;">üåê</h3>
            <h4>API ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó</h4>
            <p>‡¶¨‡¶æ‡¶π‡ßç‡¶Ø‡¶ø‡¶ï ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶§‡¶•‡ßç‡¶Ø</p>
        </div>
        """, unsafe_allow_html=True)

def create_search_interface():
    """Enhanced search interface with professional layout"""
    st.markdown("## üîç ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®")
    
    # Search tabs
    tab1, tab2, tab3 = st.tabs(["üîç ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ñ‡ßã‡¶Å‡¶ú", "üéØ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ì‡¶∑‡ßÅ‡¶ß", "üåê ‡¶∏‡¶¨ ‡¶â‡ßé‡¶∏"])
    
    with tab1:
        st.markdown("### ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ñ‡ßã‡¶Å‡¶ú - ‡¶Æ‡ßÇ‡¶≤ ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá")
        
        # Create a professional search container
        with st.container():
            # Search input and controls in one row
            col1, col2, col3 = st.columns([4, 1, 1])
            
            with col1:
                search_query = st.text_input(
                    "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
                    placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: ‡¶ú‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ï‡¶ø ‡¶ï‡¶ø ‡¶Ü‡¶õ‡ßá?",
                    key="general_search"
                )
            
            with col2:
                search_results_count = st.selectbox(
                    "‡¶´‡¶≤‡¶æ‡¶´‡¶≤ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ:",
                    [3, 5, 10],
                    index=1,
                    key="results_count"
                )
            
            with col3:
                search_btn = st.button("üîç ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", key="general_search_btn", type="primary", use_container_width=True)
        
        # Clear search button below search input
        if search_query:
            col1, col2, col3 = st.columns([1, 1, 1])
            with col2:
                if st.button("üóëÔ∏è ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key="clear_search", type="secondary"):
                    st.session_state.general_search = ""
                    st.rerun()
        
        # Search results with better organization
        if search_btn and search_query and 'chatbot' in st.session_state:
            with st.spinner("üîç ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø..."):
                results = st.session_state.chatbot.search_medicines(search_query, top_k=search_results_count)
            
            if results:
                st.success(f"‚úÖ {len(results)} ‡¶ü‡¶ø ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá!")
                
                # Results in organized cards
                for i, result in enumerate(results, 1):
                    with st.expander(f"üî∏ ‡¶ì‡¶∑‡ßÅ‡¶ß {i}: {result.get(list(result.keys())[0], 'Unknown')}", expanded=False):
                        # Create two columns for better layout
                        col1, col2 = st.columns([3, 1])
                        
                        with col1:
                            # Medicine details in organized format
                            st.markdown("**üìã ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø:**")
                            for key, value in result.items():
                                if key not in ['combined_text', 'cleaned_text'] and pd.notna(value):
                                    st.markdown(f"‚Ä¢ **{key}:** {value}")
                        
                        with col2:
                            # Similarity score in a metric box
                            similarity = result.get('similarity_score', 0)
                            st.metric(
                                "‡¶Æ‡¶ø‡¶≤‡ßá‡¶∞ ‡¶π‡¶æ‡¶∞", 
                                f"{similarity:.1%}",
                                delta=f"{similarity:.1%}"
                            )
            else:
                st.warning("‚ùå ‡¶ï‡ßã‡¶® ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                st.info("üí° **‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂:** ‡¶≠‡¶ø‡¶®‡ßç‡¶® ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®")
    
    with tab2:
        st.markdown("### ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø")
        
        # Professional layout for specific medicine search
        with st.container():
            col1, col2 = st.columns([3, 1])
            
            with col1:
                medicine_name = st.text_input(
                    "‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:",
                    placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: Paracetamol",
                    key="specific_medicine"
                )
            
            with col2:
                specific_search_btn = st.button(
                    "üéØ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", 
                    key="specific_search_btn", 
                    type="primary",
                    use_container_width=True
                )
        
        # Clear button for specific search
        if medicine_name:
            col1, col2, col3 = st.columns([1, 1, 1])
            with col2:
                if st.button("üóëÔ∏è ‡¶®‡¶æ‡¶Æ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key="clear_specific", type="secondary"):
                    st.session_state.specific_medicine = ""
                    st.rerun()
        
        # Search results for specific medicine
        if specific_search_btn and medicine_name:
            if 'chatbot' in st.session_state:
                with st.spinner("üéØ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø..."):
                    result = st.session_state.chatbot.get_medicine_details(medicine_name)
                
                if result:
                    st.success("‚úÖ ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá!")
                    
                    # Create professional info card
                    st.markdown("""
                    <div style="background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%); 
                                padding: 2rem; border-radius: 15px; margin: 1rem 0;
                                border-left: 5px solid #667eea;">
                    """, unsafe_allow_html=True)
                    
                    # Organize medicine information
                    st.markdown("**üíä ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶§‡¶•‡ßç‡¶Ø:**")
                    for key, value in result.items():
                        if key not in ['combined_text', 'cleaned_text', 'similarity_score'] and pd.notna(value):
                            st.markdown(f"‚Ä¢ **{key}:** {value}")
                    
                    st.markdown("</div>", unsafe_allow_html=True)
                else:
                    st.error("‚ùå ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
                    st.info("üí° **‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂:** ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®")
    
    with tab3:
        st.markdown("### ‡¶∏‡¶¨ ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ñ‡ßã‡¶Å‡¶ú")
        st.info("üìÅ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ PDF, Word, Excel ‡¶è‡¶¨‡¶Ç API ‡¶°‡ßá‡¶ü‡¶æ ‡¶•‡ßá‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®")
        
        # Professional layout for all sources search
        with st.container():
            col1, col2 = st.columns([3, 1])
            
            with col1:
                all_sources_query = st.text_input(
                    "‡¶ñ‡ßã‡¶Å‡¶ú‡¶æ‡¶∞ ‡¶∂‡¶¨‡ßç‡¶¶:",
                    placeholder="‡¶Ø‡ßá‡¶Æ‡¶®: antibiotics",
                    key="all_sources_search"
                )
            
            with col2:
                all_sources_btn = st.button(
                    "üåê ‡¶∏‡¶¨ ‡¶â‡ßé‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", 
                    key="all_sources_btn", 
                    type="primary",
                    use_container_width=True
                )
        
        # Clear button for all sources search
        if all_sources_query:
            col1, col2, col3 = st.columns([1, 1, 1])
            with col2:
                if st.button("üóëÔ∏è ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key="clear_all_sources", type="secondary"):
                    st.session_state.all_sources_search = ""
                    st.rerun()
        
        if all_sources_btn and all_sources_query:
            st.warning("‚ö†Ô∏è ‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
            st.info("üí° ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á PDF, Word, Excel ‡¶è‡¶¨‡¶Ç API ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶Ü‡¶∏‡¶¨‡ßá")

def create_file_upload_interface():
    """Enhanced file upload interface with professional layout"""
    st.markdown("## üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®")
    
    # Upload tabs
    tab1, tab2, tab3, tab4 = st.tabs(["üìÑ PDF", "üìù Word", "üìä Excel", "üåê API"])
    
    with tab1:
        st.markdown("### PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°")
        st.info("üìÑ ‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®")
        
        # Professional file upload container
        with st.container():
            st.markdown("---")
            
            # File uploader with better styling
            pdf_file = st.file_uploader(
                "PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
                type=['pdf'],
                key="pdf_upload",
                help="‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú: 200MB"
            )
            
            if pdf_file:
                # File information in organized cards
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    <div style="background: #f0f8ff; padding: 1rem; border-radius: 10px; border-left: 4px solid #667eea;">
                        <h4 style="margin: 0; color: #667eea;">üìÑ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø</h4>
                        <p style="margin: 0.5rem 0;"><strong>‡¶®‡¶æ‡¶Æ:</strong> {}</p>
                        <p style="margin: 0.5rem 0;"><strong>‡¶∏‡¶æ‡¶á‡¶ú:</strong> {:.1f} KB</p>
                    </div>
                    """.format(pdf_file.name, pdf_file.size / 1024), unsafe_allow_html=True)
                
                with col2:
                    if st.button("üìÑ PDF ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®", key="add_pdf", type="primary", use_container_width=True):
                        if 'chatbot' in st.session_state:
                            with st.spinner("PDF ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                                success = st.session_state.chatbot.add_pdf_file(pdf_file)
                            if success:
                                st.success("‚úÖ PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                                st.balloons()
                            else:
                                st.error("‚ùå PDF ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                
                st.markdown("---")
    
    with tab2:
        st.markdown("### Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°")
        st.info("üìù ‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶§ Word ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®")
        
        # Professional file upload container
        with st.container():
            st.markdown("---")
            
            # File uploader with better styling
            word_file = st.file_uploader(
                "Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
                type=['docx', 'doc'],
                key="word_upload",
                help="‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú: 200MB"
            )
            
            if word_file:
                # File information in organized cards
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    <div style="background: #f0f8ff; padding: 1rem; border-radius: 10px; border-left: 4px solid #764ba2;">
                        <h4 style="margin: 0; color: #764ba2;">üìù ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø</h4>
                        <p style="margin: 0.5rem 0;"><strong>‡¶®‡¶æ‡¶Æ:</strong> {}</p>
                        <p style="margin: 0.5rem 0;"><strong>‡¶∏‡¶æ‡¶á‡¶ú:</strong> {:.1f} KB</p>
                    </div>
                    """.format(word_file.name, word_file.size / 1024), unsafe_allow_html=True)
                
                with col2:
                    if st.button("üìù Word ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®", key="add_word", type="primary", use_container_width=True):
                        if 'chatbot' in st.session_state:
                            with st.spinner("Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                                success = st.session_state.chatbot.add_word_file(word_file)
                            if success:
                                st.success("‚úÖ Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                                st.balloons()
                            else:
                                st.error("‚ùå Word ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                
                st.markdown("---")
    
    with tab3:
        st.markdown("### Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°")
        st.info("üìä ‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®")
        
        # Professional file upload container
        with st.container():
            st.markdown("---")
            
            # File uploader with better styling
            excel_file = st.file_uploader(
                "Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:",
                type=['xlsx', 'xls'],
                key="excel_upload",
                help="‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú: 200MB"
            )
            
            if excel_file:
                # File information in organized cards
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    <div style="background: #f0f8ff; padding: 1rem; border-radius: 10px; border-left: 4px solid #2ecc71;">
                        <h4 style="margin: 0; color: #2ecc71;">üìä ‡¶´‡¶æ‡¶á‡¶≤ ‡¶§‡¶•‡ßç‡¶Ø</h4>
                        <p style="margin: 0.5rem 0;"><strong>‡¶®‡¶æ‡¶Æ:</strong> {}</p>
                        <p style="margin: 0.5rem 0;"><strong>‡¶∏‡¶æ‡¶á‡¶ú:</strong> {:.1f} KB</p>
                    </div>
                    """.format(excel_file.name, excel_file.size / 1024), unsafe_allow_html=True)
                
                with col2:
                    if st.button("üìä Excel ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®", key="add_excel", type="primary", use_container_width=True):
                        if 'chatbot' in st.session_state:
                            with st.spinner("Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
                                success = st.session_state.chatbot.add_excel_file(excel_file)
                            if success:
                                st.success("‚úÖ Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶Ø‡ßã‡¶ó ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!")
                                st.balloons()
                            else:
                                st.error("‚ùå Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                
                st.markdown("---")
    
    with tab4:
        st.markdown("### API ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó")
        st.info("üåê ‡¶¨‡¶æ‡¶π‡ßç‡¶Ø‡¶ø‡¶ï ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ API ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®")
        
        # Professional API connection container
        with st.container():
            st.markdown("---")
            
            # API inputs in organized layout
            col1, col2 = st.columns(2)
            
            with col1:
                api_url = st.text_input(
                    "API URL:",
                    placeholder="https://api.example.com/medicines",
                    key="api_url",
                    help="API endpoint URL ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®"
                )
            
            with col2:
                api_key = st.text_input(
                    "API Key (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï):",
                    type="password",
                    placeholder="your-api-key",
                    key="api_key",
                    help="API authentication key"
                )
            
            # API connection button
            if api_url:
                col1, col2, col3 = st.columns([1, 2, 1])
                with col2:
                    if st.button("üîó API ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®", key="add_api", type="primary", use_container_width=True):
                        st.warning("‚ö†Ô∏è API ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                        st.info("üí° ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á API ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó‡ßá‡¶∞ ‡¶∏‡ßÅ‡¶¨‡¶ø‡¶ß‡¶æ ‡¶Ü‡¶∏‡¶¨‡ßá")
            
            st.markdown("---")
    
    # File management summary
    if 'chatbot' in st.session_state:
        chatbot = st.session_state.chatbot
        total_files = (len(chatbot.pdf_data) + len(chatbot.word_data) + 
                      len(chatbot.excel_data) + len(chatbot.api_data))
        
        if total_files > 0:
            st.markdown("### üìã ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶´‡¶æ‡¶á‡¶≤‡¶∏‡¶Æ‡ßÇ‡¶π")
            
            # Create summary cards
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("üìÑ PDF ‡¶´‡¶æ‡¶á‡¶≤", len(chatbot.pdf_data))
            
            with col2:
                st.metric("üìù Word ‡¶´‡¶æ‡¶á‡¶≤", len(chatbot.word_data))
            
            with col3:
                st.metric("üìä Excel ‡¶´‡¶æ‡¶á‡¶≤", len(chatbot.excel_data))
            
            with col4:
                st.metric("üåê API ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó", len(chatbot.api_data))
            
            # Clear all files button
            st.markdown("---")
            col1, col2, col3 = st.columns([1, 1, 1])
            with col2:
                if st.button("üóëÔ∏è ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßÅ‡¶®", key="clear_all_files", type="secondary"):
                    chatbot.pdf_data = []
                    chatbot.word_data = []
                    chatbot.excel_data = []
                    chatbot.api_data = []
                    st.success("‚úÖ ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá")
                    st.rerun()

def create_data_view_interface():
    """Data viewing and management interface with professional layout"""
    st.markdown("## üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®")
    
    if 'chatbot' not in st.session_state or st.session_state.chatbot.data is None:
        st.warning("‚ùå ‡¶ï‡ßã‡¶® ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Excel ‡¶´‡¶æ‡¶á‡¶≤ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return
    
    data = st.session_state.chatbot.data
    
    # Data overview in professional cards
    st.markdown("### üìà ‡¶°‡ßá‡¶ü‡¶æ ‡¶ì‡¶≠‡¶æ‡¶∞‡¶≠‡¶ø‡¶â")
    
    # Create metric cards with better styling
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                    color: white; padding: 1.5rem; border-radius: 15px; text-align: center;
                    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);">
            <h3 style="margin: 0; font-size: 2rem;">{}</h3>
            <p style="margin: 0.5rem 0; font-size: 1.1rem;">‡¶Æ‡ßã‡¶ü ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°</p>
        </div>
        """.format(len(data)), unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #2ecc71 0%, #27ae60 100%); 
                    color: white; padding: 1.5rem; border-radius: 15px; text-align: center;
                    box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3);">
            <h3 style="margin: 0; font-size: 2rem;">{}</h3>
            <p style="margin: 0.5rem 0; font-size: 1.1rem;">‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ</p>
        </div>
        """.format(len(data.columns)), unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%); 
                    color: white; padding: 1.5rem; border-radius: 15px; text-align: center;
                    box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);">
            <h3 style="margin: 0; font-size: 2rem;">{}</h3>
            <p style="margin: 0.5rem 0; font-size: 1.1rem;">PDF ‡¶´‡¶æ‡¶á‡¶≤</p>
        </div>
        """.format(len(st.session_state.chatbot.pdf_data)), unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div style="background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%); 
                    color: white; padding: 1.5rem; border-radius: 15px; text-align: center;
                    box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);">
            <h3 style="margin: 0; font-size: 2rem;">{}</h3>
            <p style="margin: 0.5rem 0; font-size: 1.1rem;">Word ‡¶´‡¶æ‡¶á‡¶≤</p>
        </div>
        """.format(len(st.session_state.chatbot.word_data)), unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Data table with professional layout
    st.markdown("### üìã ‡¶°‡ßá‡¶ü‡¶æ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤")
    
    # Pagination controls in organized layout
    with st.container():
        col1, col2, col3 = st.columns([2, 1, 1])
        
        with col1:
            st.markdown("**‡¶™‡ßá‡¶ú‡¶ø‡¶®‡ßá‡¶∂‡¶® ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏:**")
        
        with col2:
            page_size = st.selectbox(
                "‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡¶™‡ßá‡¶ú‡ßá ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°:",
                [10, 25, 50, 100],
                index=1,
                key="page_size"
            )
        
        with col3:
            total_pages = len(data) // page_size + (1 if len(data) % page_size > 0 else 0)
            page_number = st.selectbox(
                "‡¶™‡ßá‡¶ú ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞:",
                range(1, total_pages + 1),
                key="page_number"
            )
    
    # Calculate page boundaries
    start_idx = (page_number - 1) * page_size
    end_idx = start_idx + page_size
    
    # Page info
    st.info(f"üìÑ **‡¶™‡ßá‡¶ú {page_number}** - ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶° {start_idx + 1} ‡¶•‡ßá‡¶ï‡ßá {min(end_idx, len(data))} (‡¶Æ‡ßã‡¶ü {len(data)} ‡¶∞‡ßá‡¶ï‡¶∞‡ßç‡¶°)")
    
    # Data table with better styling
    st.dataframe(
        data.iloc[start_idx:end_idx],
        use_container_width=True,
        height=400
    )
    
    # Pagination navigation
    if total_pages > 1:
        st.markdown("**‡¶™‡ßá‡¶ú ‡¶®‡ßá‡¶≠‡¶ø‡¶ó‡ßá‡¶∂‡¶®:**")
        col1, col2, col3, col4, col5 = st.columns([1, 1, 2, 1, 1])
        
        with col1:
            if page_number > 1:
                if st.button("‚¨ÖÔ∏è ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶™‡ßá‡¶ú", key="prev_page"):
                    st.session_state.page_number = page_number - 1
                    st.rerun()
        
        with col2:
            if page_number < total_pages:
                if st.button("‡¶™‡¶∞‡ßá‡¶∞ ‡¶™‡ßá‡¶ú ‚û°Ô∏è", key="next_page"):
                    st.session_state.page_number = page_number + 1
                    st.rerun()
        
        with col3:
            st.markdown(f"**‡¶™‡ßá‡¶ú {page_number} / {total_pages}**")
        
        with col4:
            if st.button("üè† ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡¶™‡ßá‡¶ú", key="first_page"):
                st.session_state.page_number = 1
                st.rerun()
        
        with col5:
            if st.button("üîö ‡¶∂‡ßá‡¶∑ ‡¶™‡ßá‡¶ú", key="last_page"):
                st.session_state.page_number = total_pages
                st.rerun()
    
    st.markdown("---")
    
    # Column information with professional layout
    st.markdown("### üìà ‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶§‡¶•‡ßç‡¶Ø")
    
    # Create column info data
    col_info = []
    for col in data.columns:
        col_info.append({
            '‡¶ï‡¶≤‡¶æ‡¶Æ ‡¶®‡¶æ‡¶Æ': col,
            '‡¶°‡ßá‡¶ü‡¶æ ‡¶ü‡¶æ‡¶á‡¶™': str(data[col].dtype),
            '‡¶Æ‡ßã‡¶ü ‡¶Æ‡¶æ‡¶®': data[col].count(),
            '‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶Æ‡¶æ‡¶®': data[col].isnull().sum(),
            '‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶Æ‡¶æ‡¶®': data[col].nunique()
        })
    
    # Display column info in organized table
    col_info_df = pd.DataFrame(col_info)
    
    # Add color coding for better visualization
    def color_code_column_info(val, col_name):
        if col_name == '‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶Æ‡¶æ‡¶®':
            if val > 0:
                return 'background-color: #ffebee; color: #c62828;'
            else:
                return 'background-color: #e8f5e8; color: #2e7d32;'
        elif col_name == '‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶Æ‡¶æ‡¶®':
            if val == 1:
                return 'background-color: #fff3e0; color: #ef6c00;'
            else:
                return 'background-color: #e3f2fd; color: #1565c0;'
        return ''
    
    # Apply styling and display
    styled_df = col_info_df.style.apply(
        lambda x: [color_code_column_info(val, col) for val, col in zip(x, col_info_df.columns)],
        axis=1
    )
    
    st.dataframe(styled_df, use_container_width=True, height=300)
    
    # Quick actions
    st.markdown("---")
    st.markdown("### ‚ö° ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü", key="export_data", type="secondary"):
            # Create CSV for download
            csv = data.to_csv(index=False)
            st.download_button(
                label="üì• CSV ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®",
                data=csv,
                file_name=f"medicine_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
    
    with col2:
        if st.button("üîç ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£", key="analyze_data", type="secondary"):
            st.info("üí° ‡¶°‡ßá‡¶ü‡¶æ ‡¶¨‡¶ø‡¶∂‡ßç‡¶≤‡ßá‡¶∑‡¶£ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶¨‡ßá")
    
    with col3:
        if st.button("üîÑ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂", key="refresh_data", type="secondary"):
            st.rerun()

def create_help_interface():
    """Help and FAQ interface"""
    st.markdown("## ‚ÑπÔ∏è ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ì ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ")
    
    # FAQ
    st.markdown("### ‚ùì ‡¶™‡ßç‡¶∞‡¶æ‡¶Ø‡¶º‡¶∂‡¶á ‡¶ú‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶∏‡¶ø‡¶§ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®")
    
    with st.expander("üîç ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶¨‡ßã?"):
        st.markdown("""
        **‡¶∏‡¶π‡¶ú ‡¶™‡¶¶‡ßç‡¶ß‡¶§‡¶ø:**
        1. ‡¶∏‡¶æ‡¶á‡¶°‡¶¨‡¶æ‡¶∞‡ßá '‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®' ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        2. ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶¨‡¶ï‡ßç‡¶∏‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶â‡¶™‡¶∏‡¶∞‡ßç‡¶ó ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
        3. '‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®' ‡¶¨‡¶æ‡¶ü‡¶®‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
        
        **‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:**
        - "Paracetamol"
        - "‡¶ú‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶ì‡¶∑‡ßÅ‡¶ß"
        - "‡¶¨‡ßç‡¶Ø‡¶•‡¶æ‡¶®‡¶æ‡¶∂‡¶ï"
        """)
    
    with st.expander("üìÅ ‡¶ï‡ßã‡¶® ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø?"):
        st.markdown("""
        **‡¶∏‡¶Æ‡¶∞‡ßç‡¶•‡¶ø‡¶§ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü:**
        - üìÑ **PDF**: ‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶§‡¶•‡ßç‡¶Ø‡ßá‡¶∞ PDF ‡¶°‡¶ï‡ßÅ‡¶Æ‡ßá‡¶®‡ßç‡¶ü
        - üìù **Word**: .docx ‡¶è‡¶¨‡¶Ç .doc ‡¶´‡¶æ‡¶á‡¶≤
        - üìä **Excel**: .xlsx ‡¶è‡¶¨‡¶Ç .xls ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏
        - üåê **API**: ‡¶¨‡¶æ‡¶π‡ßç‡¶Ø‡¶ø‡¶ï ‡¶°‡ßá‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó
        
        **‡¶∏‡¶∞‡ßç‡¶¨‡ßã‡¶ö‡ßç‡¶ö ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶æ‡¶á‡¶ú:** 200MB
        """)
    
    with st.expander("üîß ‡¶ï‡ßã‡¶® ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßá ‡¶ï‡¶ø ‡¶ï‡¶∞‡¶¨‡ßã?"):
        st.markdown("""
        **‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶∏‡¶Æ‡¶æ‡¶ß‡¶æ‡¶®:**
        1. ‡¶™‡ßá‡¶ú ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶® (F5)
        2. ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
        3. ‡¶á‡¶®‡ßç‡¶ü‡¶æ‡¶∞‡¶®‡ßá‡¶ü ‡¶∏‡¶Ç‡¶Ø‡ßã‡¶ó ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®
        4. ‡¶¨‡ßç‡¶∞‡¶æ‡¶â‡¶ú‡¶æ‡¶∞ ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        
        **‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó:** support@medicinechatbot.com
        """)
    
    # Usage guide
    st.markdown("### üìñ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡ßá‡¶∂‡¶®‡¶æ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **üöÄ ‡¶¶‡ßç‡¶∞‡ßÅ‡¶§ ‡¶∂‡ßÅ‡¶∞‡ßÅ:**
        1. ‡¶™‡ßç‡¶∞‡¶•‡¶Æ‡ßá Excel ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
        2. ‡¶∏‡¶æ‡¶á‡¶°‡¶¨‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßá‡¶ú ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®
        3. ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡ßá ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®
        4. ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßá ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®
        """)
    
    with col2:
        st.markdown("""
        **üí° ‡¶ü‡¶ø‡¶™‡¶∏:**
        - ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶ì ‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶â‡¶≠‡¶Ø‡¶º ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®
        - ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        - ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        - ‡¶è‡¶ï‡¶æ‡¶ß‡¶ø‡¶ï ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®
        """)

def main():
    # Page configuration
    st.set_page_config(
        page_title="üíä ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶Æ‡ßá‡¶°‡¶ø‡¶∏‡¶ø‡¶® ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü",
        page_icon="üíä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Custom CSS for modern design
    st.markdown("""
    <style>
    /* Main styling */
    .main > div {
        padding-top: 2rem;
    }
    
    /* Sidebar styling */
    .css-1d391kg {
        background: linear-gradient(180deg, #f8f9fa 0%, #e9ecef 100%);
    }
    
    /* Button styling */
    .stButton > button {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border-radius: 25px;
        border: none;
        padding: 0.75rem 2rem;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    
    .stButton > button:hover {
        background: linear-gradient(45deg, #764ba2, #667eea);
        transform: translateY(-2px);
        box-shadow: 0 4px 20px rgba(0,0,0,0.2);
    }
    
    /* Input styling */
    .stTextInput > div > div > input {
        border-radius: 10px;
        border: 2px solid #e0e0e0;
        padding: 0.75rem;
        transition: border-color 0.3s ease;
    }
    
    .stTextInput > div > div > input:focus {
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }
    
    /* Metric styling */
    .metric-container {
        background: white;
        padding: 1rem;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        text-align: center;
    }
    
    /* Expander styling */
    .streamlit-expanderHeader {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        border-radius: 10px;
        border: 1px solid #dee2e6;
    }
    
    /* Tab styling */
    .stTabs [data-baseweb="tab-list"] {
        gap: 8px;
    }
    
    .stTabs [data-baseweb="tab"] {
        border-radius: 10px;
        padding: 0.5rem 1rem;
        background: #f8f9fa;
        border: 1px solid #dee2e6;
    }
    
    /* Hide Streamlit branding */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .stDeployButton {display:none;}
    
    /* Animation */
    @keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    
    .element-container {
        animation: slideIn 0.5s ease-out;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Initialize chatbot
    if 'chatbot' not in st.session_state:
        try:
            st.session_state.chatbot = ImprovedMedicineChatbot('medicine_data.xlsx')
            if st.session_state.chatbot.data is not None:
                st.success(f"‚úÖ ‡¶°‡ßá‡¶ü‡¶æ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Æ‡ßã‡¶ü {len(st.session_state.chatbot.data)} ‡¶ü‡¶ø ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")
        except Exception as e:
            st.error(f"‚ùå ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡¶¨‡¶ü ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {str(e)}")
            st.stop()
    
    # Create sidebar and get selected page
    selected_page = create_sidebar()
    
    # Route to appropriate page
    if selected_page == "üè† ‡¶π‡ßã‡¶Æ":
        create_main_interface()
        
        # Quick access features on home page
        st.markdown("---")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üîç ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶§‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßÅ‡¶®", key="start_search", type="primary"):
                st.session_state.page = "üîç ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®"
                st.rerun()
        
        with col2:
            if st.button("üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®", key="start_upload", type="secondary"):
                st.session_state.page = "üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°"
                st.rerun()
        
        with col3:
            if st.button("üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®", key="view_data", type="secondary"):
                st.session_state.page = "üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®"
                st.rerun()
    
    elif selected_page == "üîç ‡¶ì‡¶∑‡ßÅ‡¶ß ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®":
        create_search_interface()
    
    elif selected_page == "üìÅ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶°":
        create_file_upload_interface()
    
    elif selected_page == "üìä ‡¶°‡ßá‡¶ü‡¶æ ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®":
        create_data_view_interface()
    
    elif selected_page == "‚ÑπÔ∏è ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø":
        create_help_interface()
    
    # Footer
    st.markdown("---")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div style="text-align: center; padding: 1rem;">
            <h4>üíä ‡¶®‡¶ø‡¶∞‡¶æ‡¶™‡¶¶ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞</h4>
            <p>‡¶∏‡¶¨‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞‡ßá‡¶∞ ‡¶™‡¶∞‡¶æ‡¶Æ‡¶∞‡ßç‡¶∂ ‡¶®‡¶ø‡¶®</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div style="text-align: center; padding: 1rem;">
            <h4>üîç ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö</h4>
            <p>AI ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶§‡¶•‡ßç‡¶Ø ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div style="text-align: center; padding: 1rem;">
            <h4>üì± ‡¶∏‡¶¨ ‡¶°‡¶ø‡¶≠‡¶æ‡¶á‡¶∏‡ßá</h4>
            <p>‡¶Æ‡ßã‡¶¨‡¶æ‡¶á‡¶≤ ‡¶ì ‡¶ï‡¶Æ‡ßç‡¶™‡¶ø‡¶â‡¶ü‡¶æ‡¶∞‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®</p>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
